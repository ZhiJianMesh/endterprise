[
{
    "name": "create",
    "method":"POST",
    "property" : "private",
    "tokenChecker" : "OAUTH",
    "comment":"创建定时任务",

    "request": [
        {"name":"name", "type":"string", "must":true, "regular":"^[0-9a-zA-Z_]{1,30}$", "comment":"任务名称"},
        {"name":"sync", "type":"int", "must":true, "comment":"是否为同步方式调用"},
        {"name":"maxRetry", "type":"int", "must":true, "min":1, "comment":"一个周期内，最大失败重试次数"},
        {"name":"minTime", "type":"int", "must":true, "min":1, "comment":"最小重试周期，单位分钟"},
        {"name":"type", "type":"string", "must":true, "options":["D","W","M","C"], "comment":"类型"},
        {"name":"val", "type":"int", "must":true, "min":0,"comment":"D/W/M:离周期起点的分钟间隔，C:周期的分钟间隔"},
        {"name":"url", "type":"string", "must":true, "min":"2", "comment":"唤起服务执行任务的URL，建议URL中携带公司ID、任务名称"}
    ],
    
    "vars": [
        {"name":"taskId", "type":"long", "val":"@{ABSHASH|#tokenCaller,^cid,name}", "comment":"任务ID"}
    ],
    
    "process" : [{
        "name" : "create_task",
        "type" : "rdb",
        "db": "tasks",
        "sqls" : [
            "js:var nextStart=DB.recentNextPeriod('@{type}',@{NOW},@{val}*60000)/60000;
             var sql=`replace into tasks(id,cid,maxRetry,minTime,type,val,sync,name,service,url,
                leftTimes,interval,nextStart,nextTryAt)
              values(@{taskId},@{^cid},@{maxRetry},@{minTime},
                '@{type}',@{val},@{sync},'@{name}','@{#tokenCaller}','@{url}',
                @{maxRetry},@{minTime},` + nextStart + ',' + nextStart + ')';
             DB.sql(sql);
            "
        ]
    }]
},

{
    "name": "remove",
    "method":"DELETE",
    "property" : "private",
    "tokenChecker" : "OAUTH",
    "comment":"删除定时任务",

    "request": [
        {"name":"id", "type":"long", "must":true, "min":0, "comment":"任务ID"}
    ],

    "process" : [{
        "name" : "remove_task",
        "type" : "rdb",
        "db": "tasks",
        "sqls" : [
            "delete from tasks where id=@{id} and service='@{#tokenCaller}'"
        ]
    }]
},

{
    "name": "grab",
    "method":"GET",
    "property" : "private",
    "tokenChecker" : "APP",
    "comment":"抢任务",

    "request": [
        {"name":"id", "type":"long", "must":true, "min":0, "comment":"任务ID"},
        {"name":"tag", "type":"string", "must":true, "min":0, "comment":"争抢标识"}
    ],

    "process" : [{
        "name" : "grab_the_task",
        "type" : "rdb",
        "db": "tasks",
        "sqls" : [
            {
                "multi":false,
                "metas":"each",
                "merge":true,
                "comment":"抢任务时，可能其他实例已经抢走，此时nextTryAt会比当前时间大",
                "sql":"select cid,type,val,maxRetry,minTime,
                    nextStart,nextTryAt,interval,leftTimes
                  from tasks where id=@{id} and nextTryAt<=@{NOW|unit60000}"
            },

            "js:var cur=@{NOW|unit60000};
            var nextStart=DB.recentNextPeriod('@[!type]',@[!nextStart]*60000,@[!val]*60000)/60000;
            var interval=@[!interval]*2;
            var leftTimes=@[!leftTimes]-1;
            var end = @[!nextTryAt] + interval;
            //已到下一周期，则重置重试次数
            if(@[!nextStart]<=cur) {
                interval=@[!minTime];
                leftTimes=@[!maxRetry];
                end=cur+interval;
            }
            
            if(leftTimes<0) {
                DB.sqlError(RetCode.NOT_EXISTS,'retried too many times');
            } else {
                var sql = `update tasks set nextStart=`+nextStart
                    + `,interval=`+interval
                    + `,nextTryAt=`+end
                    + `,leftTimes=`+leftTimes
                    + `,tag='@{tag}' where id=@{id} and nextTryAt<=`+cur;
                DB.sql(sql);
            }
            ",

            {
                "comment":"用于确认是否抢到此任务，如果tag与自己设置的相同，则表示抢到了",
                "multi":false,
                "metas":"each",
                "merge":true,
                "sql":"select tag from tasks where id=@{id}"
            }
        ]
    }],
    
    "response":[
        {"name":"tag", "type":"string"}
    ]
},

{
    "name": "result",
    "method":"POST",
    "property" : "private",
    "tokenChecker" : "APP",
    "comment":"保存定时任务最近的执行结果，只是将任务通知给服务，并不表示成功执行了。
        最终执行的结果由/callback通知给schedule",

    "request": [
        {"name":"taskId", "type":"long", "must":true, "min":0, "comment":"任务ID"},
        {"name":"code", "type":"int", "must":true, "min":0, "comment":"执行返回码"},
        {"name":"info", "type":"string", "must":true, "min":1, "max":30, "comment":"执行信息"}
    ],

    "process" : [{
        "name" : "set_result",
        "type" : "rdb",
        "db": "tasks",
        "sqls" : [
            "update tasks set code=@{code},info='@{info}' where id=@{taskId}"
        ]
    }]
},

{
    "name": "tasks",
    "method":"GET",
    "property" : "private",
    "tokenChecker" : "APP",
    "comment":"查询所有等待执行的任务",
    
    "process" : [{
        "name" : "get_waiting_tasks",
        "type" : "rdb",
        "db": "tasks",
        "sqls" : [{
            "name":"tasks",
            "multi":true,
            "metas":"each",
            "merge":false,
            "sql":"
              select id,cid,sync,name,service,url
                from tasks where nextTryAt<=@{NOW|unit60000} and code<>0
              union
              select id,cid,sync,name,service,url
                from tasks where nextStart<=@{NOW|unit60000}
            "
        }]
    }]
},

{
    "name": "list",
    "method":"GET",
    "property" : "private",
    "tokenChecker" : "OM",
    "comment":"查询所有任务",
    
    "request": [
        {"name":"num", "type":"int", "must":true, "min":10, "comment":"查询数量"},
        {"name":"offset", "type":"int", "must":true, "min":0,"comment":"偏移"}
    ],
    
    "process" : [{
        "name" : "get_tasks",
        "type" : "rdb",
        "db": "tasks",
        "sqls" : [{
            "name":"tasks",
            "multi":true,
            "metas":"cols",
            "merge":false,
            "sql":"select id,cid,name,service,type,val,url,maxRetry,minTime
                 from tasks order by id
                 LIMIT @{num} OFFSET @{offset}"
        }]
    }]
},

{
    "name": "gets",
    "method":"GET",
    "property" : "private",
    "tokenChecker" : "COMPANY",
    "comment":"查询公司的所有任务，用于公司从公有云迁移至私有云，或从私有云迁移到公有云",
    "process" : [
        "name" : "get_tasks",
        "type" : "rdb",
        "db" : "tasks",
        "sqls" : [{
            "name":"list",
            "multi":true,
            "merge":false,
            "metas":"each",
            "sql":"select id,type,sync,val,maxRetry,minTime,
                interval,name,service,url
             from tasks where cid=@{#tokenCid}"
        }]
    ]
},

{
    "name": "puts",
    "method":"PUT",
    "property" : "private",
    "tokenChecker" : "COMPANY",
    "comment":"批量存储公司任务，用于公司从公有云迁移至私有云，或从私有云迁移到公有云",

    "request": [
        {"name":"tasks", "type":"object", "must":true, "list":true, "minSize":1,
         "comment":"从云端迁移时，密码全部存入本地", "props":[
            {"name":"id", "type":"long", "must":true, "comment":"任务ID"},
            {"name":"type", "type":"string", "must":true, "options":["D","W","M","C"], "comment":"任务类型"},
            {"name":"sync", "type":"int", "must":true, "comment":"是否为同步方式调用"},
            {"name":"val", "type":"int", "must":true, "min":0, "comment":"D/W/M:离周期起点的分钟间隔，C:周期的分钟间隔"},
            {"name":"name", "type":"string", "must":true, "regular":"^[0-9a-zA-Z_]{1,30}$", "comment":"任务名称"},
            {"name":"maxRetry", "type":"int", "must":true, "min":1, "comment":"一个周期内，最大失败重试次数"},
            {"name":"minTime", "type":"int", "must":true, "min":1, "comment":"最小重试周期，单位分钟"},
            {"name":"url", "type":"string", "must":true, "min":"2", "comment":"唤起服务执行任务的URL，建议URL中携带公司ID、任务名称"}
        ]}
    ],

    "process" : [{
        "name" : "save_tasks",
        "type" : "rdb",
        "db" : "keystore",
        "sqls" : [
            "js:var sqls=['replace into tasks(id,cid,maxRetry,minTime,
                type,val,sync,name,service,url,
                leftTimes,interval,nextStart,nextTryAt) values'];
              var tasks=@{tasks};
              var curTime=@{NOW};
              for(var i in tasks) {
                if(i>0) sqls.push(',');
                var t=tasks[i];
                var nextStart=DB.recentNextPeriod(t.type,curTime,t.val*60000)/60000;
                sqls.push('(', t.id, ',', @{#tokenCid}, ',', t.maxRetry, ',', t.minTime,
                `,'`, t.type, `',`, t.val, ',', t.sync,`,'`, t.name, `','`, t.service, `','`,t.url,`',`,
                t.maxRetry, ',', t.minTime, ',', nextStart, ',', nextStart,')');
              }
              DB.sql(sqls.join(''));
            "
        ]
    }]
}
]