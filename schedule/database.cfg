[
{
    "name":"tasks",
    "type":"rdb",
    "version":"0.2.0",
    "versions":[{
        "minVer":"0.0.0",
        "maxVer":"0.1.1",
        "sqls": [
            "create table if not exists tasks (
                id        int not null primary key, -- seqid
                cid       int not null default 0, -- 公司id
                
                type      char(1) not null, -- D:按天，W:按周，M:按月，Y:按年，P:周期性的
                sync      char(1) not null default 'N', -- 是否为同步：Y是，N否
                val       int not null, -- D/W/M:离周期起点的分钟间隔，P:周期的分钟间隔
                maxRetry  int not null default 1, -- 最大失败重试次数
                minTime   int not null, -- 最小重试周期，根据任务复杂程度设置，最小1分钟
                
                -- runtime informations
                -- leftTimes/interval/nextTime/endTime/tag/code/info
                leftTimes int not null, -- 剩下的重试次数，初始为maxRetry

                -- 下次开始时间(UTC分钟)，超过这个时间无论是否处理完，都重新开始
                nextStart int not null,
                -- 失败后，同一周期中，下次重试时间(UTC分钟)，每次interval比上一次加一倍间隔
                -- 直到leftTimes为0或进入下一个周期
                nextTryAt int not null,

                -- 重试时间间隔(分钟)，初始为minTime，每次重试都翻倍                    
                interval  int not null,

                code      int not null default -1, -- 最后一次返回码
                name      varchar(255) not null, -- 任务名称
                service   varchar(255) not null, -- 任务所属服务名称
                -- 任务URL，只接受GET方法
                -- 被调方不能阻塞，schedule只起到唤起作用
                -- 所以耗时定时任务，sync因设置为N，服务执行完成后再将结果通知给schedule
                url       varchar(1024) not null,
                                                
                info      varchar(255) not null default '', -- 最后一次返回信息
                tag       varchar(255) not null default '' -- 争抢标识，用UUID
            )",
            "create index if not exists idx_tasks_nextTryAt on tasks(nextTryAt,code)",
            "create index if not exists idx_tasks_nextStart on tasks(nextStart)",
            "create unique index if not exists idx_tasks_cid on tasks(cid,service,name)",

            //异步定时任务执行结果，业务执行完定时任务后，调用/report_result通知给schedule
            "create table if not exists results (
                taskId    bigint(8) not null, -- abshash
                code      int not null default -1, -- 返回码
                info      varchar(255) not null default '', -- 返回信息
                tag       varchar(255) not null default '', -- 争抢标识，用UUID
                primary key(taskId,tag)
            )",
            
            //服务委托给schedule的异步任务，
            //schedule会立刻执行一遍，无论成功与否，都给调用方返回成功
            //如果失败则记录到表中，后面继续尝试，尝试成功后删除记录
            //超过最大尝试次数后，放弃执行，但是不删除记录
            "create table if not exists proxies (
                id        int not null primary key, -- seqid
                cid       int not null default 0, -- 公司id

                leftTimes int not null default 0, -- 剩下的重试次数，初始值从调用服务传过来
                -- 失败后，下一次重试时间，单位毫秒
                nextTryAt bigint(8) not null default 0,
                -- 重试时间间隔，初始值从调用服务传过来，单位毫秒，每次重试加一倍
                interval  int not null default 0,
                code      int not null default -1, -- 最后一次返回码

                caller    varchar(255) not null default '', -- 调用方
                callee    varchar(255) not null default '', -- 被调方
                tag       varchar(255) not null default '', -- 争抢标识，用UUID，便于问题回溯
                url       varchar(1024) not null, -- 任务URL，只接受GET方法
                info      varchar(255) not null default '' -- 最后一次返回信息
            )",
            "create index if not exists idx_proxies_nextTryAt on proxies(nextTryAt)"
        ]
    }]
}
]