[
{
    "name": "create",
    "method":"POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment":"每次消费后，都会更改签名，保证balance不会被随意修改",
            
    "request": [
        {"name":"vip", "type":"int", "must":true, "min":0, "comment":"会员id"},
        {"name":"order", "type":"int", "must":true, "min":0, "comment":"订单id"},
        {"name":"val", "type":"float", "must":true, "min":0, "comment":"消费额：次或金额"},
        {"name":"pwd", "type":"string", "must":true, "min":1, "comment":"会员自己的密码"},
        {"name":"comment", "type":"string", "must":false, "default":""}
    ],

    "process" : [
        {
            "name" : "getBaseInfo",
            "type" : "rdb",
            "db": "member",

            "sqls" : [
                {
                    "name":"pwd",
                    "comment":"查询会员密码",
                    "multi":false,
                    "merge":true,
                    "metas" : "each",
                    "sql":"select pwd from vips where id=@{vip}"
                },
                {
                    "name":"balance",
                    "comment":"查询余额、签名、最近消费时间",
                    "multi":false,
                    "merge":true,
                    "metas" : "each",
                    "sql":"select balance-@{val} as left,balance,
                            update_time as ut,sign,pkgId
                           from orders where id=@{order}"
                }
            ]
        },
        
        {
            "name" : "check",
            "type" : "js",
            "script" : "
                if(@{!left}<0) {
                    Mesh.error(RetCode.SERVICE_ERROR, 'balance un-sufficient');
                } else if(!Secure.pbkdf2Check('@{pwd}','@{!pwd}')) {
                    Mesh.error(RetCode.WRONG_PARAMETER, 'fail to check pwd');
                } else if(Secure.sha256('@{pwd}-@{!ut}-@{!balance}')!='@{!sign}') {
                    Mesh.error(RetCode.SERVICE_ERROR+1, 'invalid balance sign');
                } else {
                    Mesh.success({});
                }
            "
        },
        {
            "name":"get_consume_id",
            "type" : "var",
            "vars":{
                "consumeId":"@{SEQUENCE|'consumer'}"
            }
        },
        {
            "name" : "consume",
            "type" : "rdb",
            "db": "member",
            "comment":"每次消费记录，需要用会员密码签名",
            "sqls" : [
                "insert into consumelogs(id,vip,order_id,creator,createAt,balance,val,sign,cmt)
                      values(@{consumeId},@{vip},@{order},
                      '@{#tokenAcc}',@{#reqAt},@{!left},@{val},'@{SHA256|pwd,#reqAt,val}','@{comment}')",

                "update orders set balance=@{!left}, sign='@{SHA256|pwd,#reqAt,!left}' where id=@{order}",
                {
                    "name":"updateMainReport",
                    "comment":"更新总报表",
                    "sql":"insert or ignore into mainreports(reportAt) values(@{NOW|unit7200000});
                       update mainreports set logNum=logNum+1 where reportAt=@{NOW|unit7200000}"
                },
                
                {
                    "name":"getTotalBalance",
                    "comment":"获取当前总余额",
                    "metas" : "each",
                    "multi":false,
                    "merge":true,
                    "sql":"select ifnull(sum(balance),0) as total from orders where pkgId=@{!pkgId} and balance>0"
                },
                
                {
                    "name":"updatePkgReport",
                    "comment":"更新套餐报表",
                    "sql":"insert or ignore into pkgreports(pkgId,reportAt) values(@{!pkgId},@{NOW|unit86400000});
                        update pkgreports set logVal=@{val},logNum=logNum+1,orderBal=@[!total]
                               where pkgId=@{!pkgId} and reportAt=@{NOW|unit86400000}"
                }
            ]
        }
    ],
    "response":[]
},

{
    "name": "setComment",
    "method":"POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment":"修改备注信息",

    "request": [
        {"name":"id", "type":"long",  "must":true, "min":0, "comment":"消费记录id"},
        {"name":"comment", "type":"string", "must":false, "default":""}
    ],

    "process" : [
        {
            "name" : "set",
            "type" : "rdb",
            "db": "member",
            "sqls" : [
                "update consumelogs set cmt='@{comment}' where id=@{id}"
            ]
        }
    ],
    "response":[]
},

{
    "name": "list",
    "method":"GET",
    "property" : "private",
    "tokenChecker" : "USER",
            
    "request": [
        {"name":"order", "type":"int",  "must":true, "min":0, "comment":"订单id"},
        {"name":"offset", "type":"int",  "must":true, "min":0, "comment":"偏移"},
        {"name":"num", "type":"int",  "must":true, "min":1, "comment":"返回行数"}
    ],

    "process" : [
        {
            "name" : "logs",
            "type" : "rdb",
            "db": "member",
            "sqls" : [
                {
                    "name":"logs",
                    "metas" : "each",
                    "multi":true,
                    "sql":"select id,createAt,val,balance,creator,cmt 'comment' from consumelogs
                     where order_id=@{order} order by createAt asc
                     LIMIT @{num} OFFSET @{offset}"
                }
            ]
        }
    ],
    "response": [
        {"name":"logs", "type":"object", "list":true, "props":[
            {"name":"id", "type":"int", "comment":"日志ID"},
            {"name":"creator", "type":"string", "comment":"创建人帐号"},
            {"name":"createAt", "type":"date", "format":"yyyy-MM-dd HH:mm", "comment":"创建时间"},
            {"name":"balance", "type":"float"},
            {"name":"val", "type":"float"},
            {"name":"comment", "type":"string"}
        ]}
    ]    
},

{
    "name": "todocx",
    "method":"GET",
    "property" : "private",
    "tokenChecker" : "USER",
            
    "request": [
        {"name":"order", "type":"int",  "must":true, "min":0, "comment":"订单id"}
    ],

    "process" : [
        {
            "name" : "getTemplate",
            "type" : "call",
            "service":"config",
            "method":"GET",
            "url":"/get",
            "tokenSign":"OAUTH",
            "trans":false,
            "parameters":"c=vip&k=template&as=baseSegs&v={}"
        },
        {
            "name" : "logs",
            "type" : "rdb",
            "db": "member",
            "sqls" : [
                {
                    "name":"baseInfo",
                    "metas" : "each",
                    "multi":false,
                    "merge":true,
                    "sql":"select v.name userName,v.ext baseInfo
                      from orders o,vips v
                     where o.id=@{order} and v.id=o.vip"
                },
                {
                    "name":"logs",
                    "metas":"each",
                    "multi":true,
                    "sql":"select creator,createAt,val,balance,cmt 'comment' from consumelogs
                     where order_id=@{order} order by createAt asc"
                }
            ]
        }
    ],
    "response":{
        "check":false,
        "type":"DOCX",
        "template":"/conf/service_logs.tmpl",
        "logo":"word/media/image1.png",
        "saveAs":"@{!userName}_logs.docx"
    }
},

{
    "name": "check",
    "method":"GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment":"输入会员密码，校验消费记录是否正常",
            
    "request": [
        {"name":"id", "type":"long",  "must":true, "min":0, "comment":"消费记录id"},
        {"name":"pwd", "type":"string", "must":true, "min":1}
    ],

    "process" : [
        {
            "name" : "log",
            "type" : "rdb",
            "db": "member",
            "sqls" : [
                {
                    "name":"log",
                    "multi":false,
                    "merge":true,
                    "sql":"select createAt,val,sign from consumelogs where id=@{id}"
                }
            ]
        },
        
        {
            "name" : "check",
            "type" : "js",
            "script" : "
                if(Secure.sha256('@{pwd}-@{!createAt}-@{!val}')=='@{!sign}') {
                    Mesh.success({});
                } else {
                    Mesh.error(RetCode.SERVICE_ERROR, 'invalid pwd or be modified');
                }
            "
        }
    ],
    
    "response":[]
}
]