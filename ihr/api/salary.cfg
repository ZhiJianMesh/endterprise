[
{
    "name" : "get",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "部门经理查看出差补贴、报销、奖金详情，其他种类的不可查看",
    
    "request": [
        {"name":"uid", "type":"int", "must":true, "min":0, "comment":"帐号id"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度，UTC月度"}
    ],

    "process" : [
        {"macro":"is_his_leader", "#UID#":"@{uid}"},
        {
            "name" : "get_salaries",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [{
                "name" : "salaries",
                "multi" : false,
                "merge" : true,
                "metas" : "each",
                "sql" : "select gid,type,val from salary 
                    where uid=@{uid} and month=@{month}
                      and type in('SUBSIDY','EXPENSE','BONUS')"
            }]
        }
    ]
},
{
    "name" : "my",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "查看自己的工资详情",
    
    "request": [
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度，UTC月度"}
    ],

    "process" : [{
        "name" : "get_salaries",
        "type" : "rdb",
        "db" : "log",
        "sqls" : [{
            "name" : "list",
            "multi" : true,
            "merge" : false,
            "metas" : "each",
            "sql" : "select gid,type,val from salary 
                where uid=@{#tokenCaller} and month=@{month}"
        }]
    }]
},

{
    "name" : "calculate",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "APP-schedule",
    "comment" : "每月计算薪酬及社会保障金，由schedule服务定时发起",

    "request": [
        {"name":"taskId", "type":"long", "must":true, "min":0, "comment":"任务ID"},
        {"name":"tag", "type":"string", "must":true, "min":10, "comment":"一次执行的标识"},
        {"name":"zone", "type":"int", "must":true, "min":0, "comment":"区域ID，必须按区域计算工资"},
        {"name":"offset", "type":"int", "must":false, "default":0, "min":0, "comment":"批量偏移"},
        {"name":"num", "type":"int", "must":false, "default":100, "comment":"批量，一次不宜过多，100以内"}
    ],

    "vars":[
        {"name":"curMonth", "val":"@{NOW|months}"},
        {"name":"month", "val":"@{SUB|i,curMonth,1}"} //计算上个月的薪水
    ],

    "headProcess" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name" : "employee_num",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select count(*) employee_num from employee E,office O
                            where E.state in('NORM','HIDE')
                             and O.id=E.office and O.zone=@{zone}"
                },
                {
                    "name" : "zone_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "comment" : "区域的纳税计算公式，如果不设置，则不计算",
                    "sql" : "select taxFunc,timeOff from zone where id=@{zone}"
                },
                {
                    "name" : "securities",
                    "metas" : "each",
                    "merge" : false,
                    "multi" : true,
                    "ignores":["NOT_EXISTS"],
                    "sql" : "select sponsor,type,val val from security
                         where zone=@{zone}"
                }
            ],
            "onSuccess" : "{
                dayStart:@{UTC|month,!timeOff,monthstart,month},
                dayEnd:@{UTC|month,!timeOff,monthend,month},
                security:@{IFNULL|!securities,`[]`, obj}
            }"
        }
    ],
    
    "process" : [
        {
            "name" : "get_employees",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [{
                "name" : "employees",
                "metas" : "each",
                "merge" : false,
                "multi" : true,
                //必须在某个部门是普通员工才能计算工资
                "sql" : "select E.uid,E.deduction,E.worktime wt,E.salary,M.gid
                    from employee E,office O,member M,grp G
                    where E.state in('NORM','HIDE') and O.id=E.office and O.zone=@{zone}
                     and M.uid=E.uid and M.role='NOR' and G.id=M.gid and G.type='D' 
                   ORDER BY E.uid asc
                   LIMIT @{num} OFFSET @{offset}"
            }]
        },
        {
            "name" : "get_salary_info",
            "type" : "rdb",
            "db" : "attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [
                {
                    "name" : "salary",
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select uid,sum(val) val from attendance
                      where uid in(@{LIST|!employees,``,`uid`})
                       and start>@{!dayStart} and start<@{!dayEnd}
                       group by uid"
                },
                {
                    "name" : "overtime", //从考勤中将加班单独列出来
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select uid,sum(val) val from attendance
                      where uid in(@{LIST|!employees,``,`uid`})
                       and type in('FOW','WOW','OOW')
                       and start>@{!dayStart} and start<@{!dayEnd}
                       group by uid"
                }
            ]
        },
        {
            "name" : "get_subsidy_info",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [{
                "name" : "subsidy", //出差，从business通知过来的数据
                "metas" : "kv",
                "merge" : false,
                "multi" : true,
                "sql" : "select uid,val from salary
                  where uid in(@{LIST|!employees,``,`uid`}) 
                  and month=@{month} and type='SUBSIDY'"
            }]
        },
        {
            "name" : "save_salaries",
            "type" : "rdb",
            "db" : "log",
            "sqls" : ["js:var security=@{!security}
                var employees=@{!employees}; //雇员列表uid,deduction
                var subsidies=@{IFNULL|!subsidy,`{}`,obj}; //补贴 uid->val
                var salary=@{IFNULL|!salary,`{}`,obj}; //考勤中记录的日工资,uid->val
                var overtime=@{IFNULL|!overtime,`{}`,obj}; //加班,uid->val(overtime)
                var taxFuncStr=`@{IFNULL|!taxFunc,'return 0;'}`; //计税函数，func

                var sqls=['insert into salary(gid,uid,month,type,val) values'],
                var updSqls=[];
                var i=0;
                var subsidy,sec0,sec1,sal,tax,taxFunc,ovt;

                for(var e of employees) {
                    subsidy=subsidies[e.uid]?subsidies[e.uid]:0;
                    ovt=overtime[e.uid];
                    if(!ovt)ovt=0;
                    if(salary[e.uid]) {
                        sal=salary[e.uid]+subsidy;//工资加补贴
                        if(e.wt==0) {//自由工作时间的员工，无刷卡记录，所以直接用基本工资
                            sal+=e.salary;
                        }
                    } else {
                        //此处有一漏洞，就是入职不足一个月的情况，也会发一个月的工资
                        //这种情况，在第一个月份，设置非自由工作时间来解决
                        if(e.wt==0) {
                            sal=e.salary+subsidy;
                        } else {
                            sal=subsidy;
                        }
                    }

                    sec0=0;//社保个人缴费
                    var secuityList=[];
                    var val;
                    for(var s of security) {
                        if(s.type=='R') { //按比率
                            val=sal*s.val;
                        } else {
                            val=s.val
                        }
                        if(s.sponsor=='P') {
                            sec0+=val;
                        }
                        secuityList.push({n:s.name, v:val});
                    }
 
                    taxFunc=new Function('s', taxFuncStr);
                    sal-=sec0;//扣除社保个人缴费部分、专项扣减，再算税
                    tax=taxFunc(sal-e.deduction);
                    sal-=tax; //扣税
                    if(i>0)sqls.push(',');
                    sal -= subsidy; //补贴参与计税，但是单独发放
                    sqls.push('(',e.uid,`,@{month},'SALARY',`,sal,'),') //工资
                        .push('(',e.uid,`,@{month},'TAX',`,tax,'),'); //缴税
                    for(var s of secuityList) {//劳动保障
                        sqls.push('(',e.gid,',',e.uid,`,@{month},'`,s.n,`',`,s.v,'),');
                    }
                    sqls.push('(',e.gid,',',e.uid,`,@{month},'OVERTIME',`,ovt,')'); //加班工资
                    i++;
                }
                DB.sql(sqls.join(''));
            "]
        }
    ],
    "while":"
        if(@{#code}==RetCode.OK) {
            var offset=@{offset}+@{num};
            if(offset-@{!employee_num}>=@{num}) {//差值大于num，表示没有了
                Mesh.error(RetCode.OVER, 'over');
            } else {
                Mesh.success({offset:offset}); //覆盖offset参数
            }
        } else {
            Mesh.error(@{#code}, 'over');
        }
    ",
    
    "tailProcess" : [{
        "name" : "callback",
        "type" : "call",
        "service" : "schedule",
        "method" : "GET",
        "url" : "/callback?taskId=@{taskId}&tag=@{tag}&code=@{#code}&info=@{URL|encode,#info}",
        "tokenSign" : "APP",
        "comment" : "检查完成后，执行此回调，通知schedule执行情况"
    } ],

    "response":[]
},

{
    "name":"confirm",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "aclChecker":"RBAC",
    "feature":"salary",
    "comment" : "hr手动确认一个员工的薪酬，确认后会提交到财务进行付款",

    "request": [
        {"name":"uid", "type":"int", "must":true, "min":0, "comment":"帐号ID"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度"}
    ],

    "process":[
        {
            "name":"get_employee_info",
            "type":"rdb",
            "db":"hr",
            "sqls":[{
                "name":"employee_info",
                "metas":"each",
                "merge":true,
                "multi":false,
                "sql":"select account from employee where uid=@{uid} and state='NORM'"
            }]
        },
        {
            "name":"check_task_time", //如果工时未申报，无法申请发薪，因为需要在项目上分摊成本
            "type":"rdb",
            "db":"log",
            "convert":{"code":"NOT_EXISTS","to":6106,"info":"task time have not been confirmed"},
            "sqls":[{
                "name":"tasktimes",
                "metas":"kv",
                "merge":false,
                "multi":true,
                "sql":"select pid,ratio from tasktime
                   where uid=@{uid} and month=@{month} and state='OK'"
            }]
        },
        {
            "name":"get_salary",
            "type":"rdb",
            "db":"log",
            "sqls":[{
                "name":"salaries",
                "metas":"each",
                "merge":false,
                "multi":true,
                "sql":"select type,val from salary
                   where uid=@{uid} and month=@{month}
                    and type in('SALARY','TAX','SECRUITY0','SECRUITY1',
                    'SUBSIDY','EXPENSE','BONUS','SHARE')" //不计算OVERTIME
            }]
        },
        {
            "name" : "apply_salary",
            "type" : "call",
            "service" : "ifinance",
            "method" : "POST",
            "url" : "/salary/apply",
            "tokenSign" : "APP",
            "comment" : "向财务申请支付",
            "parameters":"{
                \"uid\":@{uid},\"month\":@{month},\"account\":\"@{!account}\",\"list\":[
                    @{FOR|!salaries, `,`, `{\"type\":\"`, e.type, `\",\"val\":`, e.val, `}`}
                ]
            }"
        },
        {
            "name" : "prj_salary_share",
            "type" : "call",
            "service" : "ifinance",
            "method" : "POST",
            "url" : "/project/setreport",
            "tokenSign" : "APP",
            "comment" : "向财务申请支付",
            "parameters":"js:var json=['{\"list\":['];
                var tasktimes=@{!tasktimes}; //pid->ratio
                var salary=0;
                var ss=@{!salaries};
                for(var s of salaries) {
                    salary+=s.val; //所有支出项都记为工资
                }
                var i=0;
                for(var pid in tasktimes) {
                    if(i>0) json.push(',');
                    json.push('{\"pid\":', pid, ',\"val\":',
                     (tasktimes[pid]*salary).toFixed(2), ',\"seg\":\"salary\"}')
                    i++;
                }
                json.push(']}');
                json.join('');
            "
        }
    ]
},

{
    "name":"add",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "aclChecker":"RBAC",
    "feature":"salary",
    "comment" : "hr手动添加薪水，比如奖金、分红等不是自动计算的薪水，只有hr可以操作",

    "request": [
        {"name":"uid", "type":"int", "must":true, "min":0, "comment":"帐号ID"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度"},
        {"name":"type", "type":"string", "must":true, "options":["BONUS","SHARE","SUBSIDY"], "comment":"类型"},
        {"name":"val", "type":"double", "must":true, "min":0, "comment":"额度"}
    ],

    "process":[
        {
            "name":"add_salary",
            "type":"rdb",
            "db":"log",
            "sqls":[
				"insert into salary(uid,month,type,val) values
                (@{uid},@{month},'@{type}',@{val})"
			]
        }
    ]
},
{
    "name" : "list",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "aclChecker":"RBAC",
    "feature":"salary",
    "comment" : "hr查看工资",
    
    "request": [
        {"name":"uids", "type":"int", "must":true, "min":0, "list":true, "minSize":1, "comment":"帐号ID"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度，UTC月度"}
    ],

    "process" : [
        {
            "name" : "get_salaries",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [{
                "name" : "salaries",
                "multi" : true,
                "merge" : false,
                "metas" : "each",
                "sql" : "select gid,uid,sum(val) val from salary
                         where uid in(@{LIST|uids}) and month=@{month}
                        group by uid"
            }]
        }
    ]
},
{
    "name" : "detail",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "aclChecker":"RBAC",
    "feature":"salary",
    "comment" : "hr查看员工工资详情",
    
    "request": [
        {"name":"uid", "type":"int", "must":true, "min":0, "comment":"帐号id"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度，UTC月度"}
    ],

    "process" : [
        {
            "name" : "get_salaries",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [{
                "name" : "salaries",
                "multi" : false,
                "merge" : true,
                "metas" : "each",
                "sql" : "select gid,type,val from salary 
                    where uid=@{uid} and month=@{month}"
            }]
        },
        {
            "name" : "get_grpinfo",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [{
                "name" : "grp_info",
                "multi" : false,
                "merge" : true,
                "metas" : "each",
                "sql" : "select path,name,fid from grp  where id=@{!gid}"
            }]
        }
    ]
}
]