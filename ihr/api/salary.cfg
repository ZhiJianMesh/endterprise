[
{
    "name" : "get",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "部门经理查看出差补贴、报销、奖金详情，其他种类的不可查看",
    
    "request": [
        {"name":"uid", "type":"int", "must":true, "min":0, "comment":"帐号id"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度，UTC月度"}
    ],

    "process" : [
        {"macro":"is_his_leader", "#UID#":"@{uid}"},
        {
            "name" : "get_salaries",
            "type" : "rdb",
            "db" : "log",
            "sharding":"@{UTC|month,0,'yyyy',month}",
            "sqls" : [{
                "name" : "salaries",
                "multi" : false,
                "merge" : true,
                "metas" : "each",
                "sql" : "select gid,type,val from salary 
                    where uid=@{uid} and month=@{month}
                      and type in('SUBSIDY','EXPENSE','BONUS')"
            }]
        }
    ]
},
{
    "name" : "my",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "查看自己的工资详情",

    "request": [
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度，UTC月度"}
    ],

    "process" : [{
        "name" : "get_salaries",
        "type" : "rdb",
        "db" : "log",
        "sharding":"@{UTC|month,0,'yyyy',month}",
        "sqls" : [{
            "name" : "list",
            "multi" : true,
            "merge" : false,
            "metas" : "each",
            "sql" : "select type,val from salitems 
                where uid=@{#tokenCaller} and month=@{month}"
        }]
    }]
},

{
    "name" : "calculate",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "APP-schedule",
    "comment" : "每月计算薪酬及社会保障金，由schedule服务每月定时发起。
        在init.cfg中初始化，默认每月15号计算",

    "request": [
        {"name":"taskId", "type":"long", "must":true, "min":0, "comment":"任务ID"},
        {"name":"tag", "type":"string", "must":true, "min":10, "comment":"一次执行的标识"},
        {"name":"zone", "type":"int", "must":true, "min":0, "comment":"区域ID，必须按区域计算工资"}
    ],

    "vars":[
        {"name":"curMonth", "val":"@{NOW|months}"},
        {"name":"month", "val":"@{SUB|i,curMonth,1}"}, //计算上个月的薪水
        {"name":"offset", "val":"0", "comment":"偏移"},
        {"name":"num", "val":"100", "comment":"批量，一次不宜过多，100以内"}
    ],

    "headProcess" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name" : "employee_num",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select count(*) employee_num from employee E,office O
                            where E.state in('NORM','HIDE')
                             and O.id=E.office and O.zone=@{zone}"
                },
                {
                    "name" : "zone_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "comment" : "区域的纳税计算公式，如果不设置，则不计算",
                    "sql" : "select taxFunc,timeOff from zone where id=@{zone}"
                },
                {
                    "name" : "securities",
                    "metas" : "each",
                    "merge" : false,
                    "multi" : true,
                    "ignores":["NOT_EXISTS"],
                    "sql" : "select sponsor,type,val,name from security where zone=@{zone}"
                }
            ],
            "onSuccess" : "{
                \"dayStart\":@{UTC|month,!timeOff,monthstart,month},
                \"dayEnd\":@{UTC|month,!timeOff,monthend,month}
            }"
        },
        {
            "name":"set_start_end",
            "type":"var",
            "vars":{
                "dayStart":"@{UTC|!dayStart,!timeOff,unit60000}",
                "dayEnd":"@{UTC|!dayEnd,!timeOff,unit60000}"
            }
        }
    ],

    "process" : [
        {
            "name" : "get_employees",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [{
                "name" : "employees",
                "metas" : "each",
                "merge" : false,
                "multi" : true,
                //必须在某个部门是普通员工才能计算工资
                "sql" : "select E.uid,E.deduction,E.worktime wt,E.salary,M.gid
                    from employee E,office O,member M,grp G
                    where E.state in('NORM','HIDE') and O.id=E.office and O.zone=@{zone}
                     and M.uid=E.uid and M.role='NOR' and G.id=M.gid and G.type='D' 
                   ORDER BY E.uid asc
                   LIMIT @{num} OFFSET @{offset}"
            }]
        },
        {
            "name" : "get_salary_info",
            "type" : "rdb",
            "db" : "attendance",
            "sharding":"@{UTC|month,0,'yyyy',month}",
            "sqls" : [{
                "name" : "salary",
                "metas" : "kv",
                "merge" : false,
                "multi" : true,
                "ignores":["NOT_EXISTS"],
                "sql" : "select uid,ifnull(sum(val),0) val from attendance
                  where uid in(@{LIST|!employees,``,`uid`})
                   and start>@{dayStart} and start<@{dayEnd}
                   group by uid"
            }]
        },
        {
            "name" : "save_salaries",
            "type" : "rdb",
            "db" : "log",
            "sharding":"@{UTC|month,0,'yyyy',month}",
            "sqls" : ["js:var security=@{IFNULL|!securities,`[]`, obj};
                var employees=@{!employees}; //雇员列表uid,deduction
                var salary=@{IFNULL|!salary,`{}`,obj}; //考勤中记录的日工资,uid->val
                var taxFuncStr=@{IFNULL|!taxFunc,'return 0;'}; //计税函数，func
                
                var sqls=['replace into salitems(uid,month,type,val) values'];
                var totalSqls=['insert or ignore into salary(gid,uid,month,val) values'];
                var secuityList=[];
                var i=0;
                var sec0,sal,tax,taxFunc,val,total;

                for(var e of employees) {
                    sal=salary[e.uid];
                    if(!sal) {
                        //自由工作时间，无刷卡记录，所以直接用基本工资
                        //入职不足一个月的情况，也会发一个月的工资
                        //这种情况，在第一个月份，设置非自由工作时间来解决
                        sal = e.wt==0?e.salary:0;
                    }
                    total=sal;

                    sec0=0;//社保个人缴费
                    secuityList=[];
                    for(var s of security) {
                        if(s.type=='R') { //按比率
                            val=parseFloat((sal*s.val).toFixed(2));
                        } else { //按金额
                            val=s.val;
                        }
                        if(s.sponsor=='P') { //个人缴纳
                            sec0+=val;
                        } else {
                            total+=val; //公司额外交的，不从工资中扣
                        }
                        if(val!=0) {
                            secuityList.push({n:s.name+'-'+s.sponsor, v:val});
                        }
                    }
 
                    taxFunc=new Function('s', taxFuncStr);
                    sal-=sec0;//扣除社保个人缴费部分、专项扣减，再算税
                    tax=taxFunc(sal-e.deduction);
                    if(tax<=0) {
                        tax=0;
                    }
                    tax=tax.toFixed(2); 
                    sal-=tax;//扣税
                    if(i>0){
                        sqls.push(',');
                        totalSqls.push(',');
                    }
                    sqls.push('(',e.uid,`,@{month},'SALARY',`,sal.toFixed(2),')'); //工资
                    if(tax>0) {
                        sqls.push(',(',e.uid,`,@{month},'TAX',`,tax,')'); //缴税
                    }
                    for(var s of secuityList) {//各项劳动保障单独列出
                        sqls.push(',(',e.uid,`,@{month},'`,s.n,`',`,s.v,')');
                    }
                    totalSqls.push('(',e.gid, ',', e.uid, ',@{month},', total,')');
                    i++;
                }
                DB.sql(sqls.join('')+';'+totalSqls.join(''));
            "]
        }
    ],
    "while":"
        if(@{#code}==RetCode.OK) {
            var offset=@{offset}+@{num};
            if(offset>=@{!employee_num}) {
                Mesh.error(RetCode.LOOP_OVER, 'over');
            } else {
                //覆盖offset，while处理中对返回data做了特殊处理，放入request中
                Mesh.success({offset:offset});
            }
        } else {
            Mesh.error(@{#code}, '@{#info}');
        }
    ",
    
    "tailProcess" : [{
        "name" : "callback",
        "type" : "call",
        "service" : "schedule",
        "method" : "GET",
        "url" : "/callback?taskId=@{taskId}&tag=@{tag}&code=@{#code}&info=@{URL|encode,#info}",
        "tokenSign" : "APP",
        "comment" : "检查完成后，执行此回调，通知schedule执行情况"
    }],

    "response":[]
},

{
    "name":"confirm",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "aclChecker":"RBAC",
    "feature":"salary",
    "comment" : "hr手动确认一个员工的薪酬，确认后会提交到财务进行付款",

    "request": [
        {"name":"uid", "type":"int", "must":true, "min":0, "comment":"帐号ID"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度"}
    ],

    "process":[
        {
            "name":"get_employee_info",
            "type":"rdb",
            "db":"hr",
            "sqls":[{
                "name":"employee_info",
                "metas":"each",
                "merge":true,
                "multi":false,
                "sql":"select account from employee where uid=@{uid} and state='NORM'"
            }]
        },
        {
            "name":"check_task_time", //如果工时未申报，无法申请发薪，因为需要在项目上分摊成本
            "type":"rdb",
            "db":"log",
            "sharding":"@{UTC|month,0,'yyyy',month}",
            "convert":{"code":"NOT_EXISTS","to":14016,"info":"task time has not been confirmed"},
            "sqls":[
                {
                    "name":"shares", //同时确认工资状态
                    "metas":"each",
                    "merge":false,
                    "multi":true,
                    "sql":"select t.pid,ifnull(t.ratio*s.val/100,0) val from tasktime t,salary s
                       where t.uid=@{uid} and t.month=@{month} and t.state='OK'
                         and s.uid=@{uid} and s.month=@{month} and s.state in('WAIT','REJ')"
                },
                {
                    "name":"totalRatio",
                    "metas":"each",
                    "merge":true,
                    "multi":false,
                    "sql":"select ifnull(sum(ratio),0) totalRatio from tasktime
                       where uid=@{uid} and month=@{month} and state='OK'"
                },
                {
                    "name":"salaries",
                    "metas":"each",
                    "merge":false,
                    "multi":true,
                    "sql":"select type,val from salitems
                       where uid=@{uid} and month=@{month}"
                }
            ],
            "onSuccess":{
                "condition":"@{CONDITION|!totalRatio,'i.==',100}",
                "errorCode":14017,
                "errorInfo":"task time has not been confirmed"
            }
        },
        {
            "name" : "apply_salary",
            "type" : "call",
            "service" : "ifinance",
            "method" : "POST",
            "url" : "/salary/apply",
            "tokenSign" : "APP",
            "comment" : "向财务申请支付",
            "parameters":"{
                \"uid\":@{uid},\"month\":@{month},\"account\":\"@{!account}\",\"list\":[
                    @{FOR|!salaries, `,`, `{\"type\":\"`, e.type, `\",\"val\":`, e.val, `}`}
                ]
            }"
        },
        {
            "name" : "prj_salary_share",
            "type" : "call",
            "service" : "ifinance",
            "method" : "POST",
            "url" : "/project/setreport",
            "tokenSign" : "APP",
            "comment" : "向财务汇报项目分摊情况",
            "parameters":"{\"list\":[
                @{FOR|!shares,`,`, `{\"pid\":`, e.pid, `,\"val\":`, e.val, `,\"seg\":\"salary\"}`}
            ]}"
        },
        {
            "name":"set_salary_state",
            "type":"rdb",
            "db":"log",
            "sharding":"@{UTC|month,0,'yyyy',month}",
            "sqls":[
                "update salary set state='OK'
                 where uid=@{uid} and month=@{month} and state<>'OK'"
            ]
        }
    ],
    "response":[]
},

{
    "name":"add",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "aclChecker":"RBAC",
    "feature":"salary",
    "comment" : "hr手动添加薪水，比如奖金、分红等不是自动计算的薪水，只有hr可以操作",

    "request": [
        {"name":"uid", "type":"int", "must":true, "min":0, "comment":"帐号ID"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度"},
        {"name":"type", "type":"string", "must":true, "options":["BONUS","SHARE","SUBSIDY"], "comment":"类型"},
        {"name":"val", "type":"double", "must":true, "min":0, "comment":"额度"}
    ],

    "process":[
        {
            "name":"add_salary",
            "type":"rdb",
            "db":"log",
            "sharding":"@{UTC|month,0,'yyyy',month}",
            "sqls":[
                "insert or ignore into salary(uid,month,val)
                    values(@{uid},@{month},0)",
                
                {
                    "expected":{"num":1, "errorCode":"NO_RIGHT", "errorInfo":"salary confirmed"},
                    "sql":"update salary set val=val+@{val}
                        where uid=@{uid} and month=@{month} and state<>'OK'"
                },
                
                "insert into salitems(uid,month,type,val) values
                (@{uid},@{month},'@{type}',@{val})"
            ]
        }
    ]
},
{
    "name" : "list",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "aclChecker":"RBAC",
    "feature":"salary",
    "comment" : "hr查看工资",

    "request": [
        {"name":"uids", "type":"int", "must":true, "min":0, "list":true, "minSize":1, "comment":"帐号ID"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度，UTC月度"}
    ],

    "process" : [
        {
            "name" : "get_salaries",
            "type" : "rdb",
            "db" : "log",
            "sharding":"@{UTC|month,0,'yyyy',month}",
            "sqls" : [{
                "name" : "list",
                "multi" : true,
                "merge" : false,
                "metas" : "none",
                "sql" : "select uid,val,update_time,state from salary
                    where uid in(@{LIST|uids}) and month=@{month}"
            }]
        }
    ]
},
{
    "name": "detail",
    "method": "GET",
    "property": "private",
    "tokenChecker" : "USER",
    "aclChecker": "RBAC",
    "feature": "salary",
    "comment": "hr查看员工工资详情",
    
    "request": [
        {"name":"uid", "type":"int", "must":true, "min":0, "comment":"帐号id"},
        {"name":"month", "type":"int", "must":true, "min":0, "comment":"月度，UTC月度"}
    ],

    "process" : [
        {
            "name" : "get_salary_details",
            "type" : "rdb",
            "db" : "log",
            "sharding":"@{UTC|month,0,'yyyy',month}",
            "sqls" : [
                {
                    "name": "get_gid",
                    "multi": false,
                    "merge": true,
                    "metas": "each",
                    "sql": "select gid from salary
                      where uid=@{uid} and month=@{month}"
                },
                {
                    "name": "salaries",
                    "multi": true,
                    "merge": false,
                    "metas": "each",
                    "sql": "select type,val from salitems 
                        where uid=@{uid} and month=@{month}"
                }
            ]
        },
        {
            "name": "get_grpinfo",
            "type": "rdb",
            "db": "hr",
            "sqls": [{
                "name": "grp_info",
                "multi": false,
                "merge": true,
                "metas": "each",
                "sql": "select path,name from grp where id=@{!gid}"
            }]
        }
    ]
}
]