[
{
    "name" : "my",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "我的考勤异常。因为按年度分库，能查到多少，受分库方式限制。
        比如两年一个库，则只能查最近两年的记录",

    "process" : [
        {
            "name" : "get_exceptions",
            "type" : "rdb",
            "db":"attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [{
                "name" : "list",
                "multi" : true,
                "merge" : false,
                "metas" : "each",
                "sql" : "select day,state,start,end,realStart,realEnd,cfmAcc,descr
                     from exception
                    where uid=@{#tokenCaller} and state in('INIT','REJ')
                    order by day desc"
            }]
        }
    ]
},
{
    "name" : "waitforme",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "aclChecker":"ABAC",
    "comment" : "指定部门中待我确认的考勤异常。
        查到多少记录受分库策略影响，通常只查最近的，所以关系不大",

    "request": [
        {"name":"gid", "type":"int", "must":true, "comment":"部门id"},
        {"name":"offset", "type":"int",  "must":true, "min":0, "comment":"偏移"},
        {"name":"num", "type":"int",  "must":true, "min":1, "comment":"查询最大数量"}
    ],
    
    "aclProcess":[
        {"macro":"is_department_leader", "#GID#":"@{gid}"}
    ],

    "process" : [
        {
            "name" : "get_exceptions",
            "type" : "rdb",
            "db":"attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [
                {
                    "name" : "list",
                    "multi" : true,
                    "merge" : false,
                    "metas" : "each",
                    "sql" : "select uid,account,day,start,end,descr from exception
                            where gid=@{gid} and state='WAIT'
                            order by day asc"
                },
                {
                    "name" : "get_total",
                    "multi" : false,
                    "merge" : true,
                    "metas" : "each",
                    "sql" : "select count(*) total from exception
                            where gid=@{gid} and state='WAIT'"
                }            
            ]
        }
    ]
},

{
    "name" : "commit",
    "method" : "PUT",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "提交部门主管确认，exception记录在定时任务中已生成",
    
    "request": [
        {"name":"day", "type":"int", "must":true, "comment":"日期，yyyyMMdd"},
        {"name":"start", "type":"int", "must":true, "comment":"实际开始时间，UTC分钟"},
        {"name":"end", "type":"int", "must":true, "biggerThan":"start", "comment":"实际结束时间，UTC分钟"}
    ],
    
    "vars":[
        {"name":"month", "val":"@{SUBSTR|day,0,6}", "comment":"只留下年&月"}
    ],

    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db":"hr",
            "sqls" : [{
                "name" : "offset",
                "multi" : false,
                "merge" : true,
                "metas" : "each",
                "sql" : "select Z.timeOff,W.maxEdit
                         from employee E,office O,zone Z,worktime W
                        where E.uid=@{#tokenCaller}
                          and O.id=E.office and Z.id=O.zone
                          and W.id=E.worktime"
            }]
        },
        {
            "name" : "get_exception_num",
            "type" : "rdb",
            "db":"attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [{
                "name" : "count",
                "multi" : false,
                "merge" : true,
                "metas" : "each",
                "sql" : "select count(*) exCount from exception
                  where uid=@{#tokenCaller} and day>@{month}01 and day<@{month}31
                    and state in('WAIT','OK')"
            }],
            "onSuccess":{
                "errorCode":"14015",
                "errorInfo":"exceed max edit times",
                "condition":"@{CONDITION|!exCount,'i.<',!maxEdit}"
            }
        },
        {
            "name" : "commit",
            "type" : "rdb",
            "db" : "attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : ["
                update exception set
                 account='@{#tokenAcc}',
                 state='WAIT',
                 realStart=@{start},
                 realEnd=@{end}
                where uid=@{#tokenCaller}
                  and day=@{day} and state in('INIT','REJ')
            "]
        }
    ],
    
    "response":[]
},

{
    "name" : "confirm",
    "method" : "PUT",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "确认员工工时修改",
    
    "request": [
        {"name":"uid", "type":"int", "must":true, "comment":"员工帐号ID"},
        {"name":"day", "type":"int", "must":true, "comment":"日期，yyyyMMdd"}
    ],
    
    "process" : [
        {"macro":"is_his_leader", "#UID#":"@{uid}"}, //用到它返回的gid，所以不用ABAC
        {
            "name" : "get_employee_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [{
                "name":"employee_info",
                "metas" : "each",
                "merge" : true,
                "multi" : false,
                "sql" : "select E.worktime,E.dSalary,M.gid,
                        Z.timeOff,W.first,W.seconde,W.third,W.forth,W.leadTime
                     from employee E,office O,zone Z,worktime W,member M, grp G
                     where E.uid=@{uid}
                      and O.id=E.office and Z.id=O.zone
                      and W.id=E.worktime
                      and M.uid=E.uid and M.role='NOR'
                      and G.id=M.gid and G.type='D'"
            }]
        },
        {
            "name" : "get_exception_info",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [{
                "name" : "exception_info",
                "metas" : "each",
                "merge" : true,
                "multi" : false,
                "sql" : "select realStart start,realEnd end from exception
                     where uid=@{uid} and day=@{day}"
            }]
        },
        {
            "name" : "confirm",
            "type" : "rdb",
            "db" : "attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [
                //删除当天异常的刷卡记录，然后重新插入
                "js:var dayStart=@{UTC|day,!timeOff,unit60000,ymd};
                var start1=dayStart+@{!first}; //最迟上班刷卡时间
                var start0=start1-@{!leadTime};//最早上班刷卡时间
                var end0=dayStart+1+@{!forth};//最早下班刷卡时间
                var end1=start0+1440;//最迟下班刷卡时间
                var mid0=dayStart+@{!second};//中间下班时间
                var mid1=dayStart+@{!third};//中间上班时间
                var start=@{!start}; //修改后的开始时间
                var end=@{!end}; //修改后的结束时间
                var interval;
                var WHOLEDAY=@{!forth}-@{!first}-(@{!third}-@{!second});
                
                //删除当前所有刷卡时间，不可删除请假、加班数据
                var sql=[`delete from attendance where uid=@{uid} and type='WORK'
                     and start>`,start0,' and end<', end1, ';']

                if(start<mid0) { //上半段下班前刷卡
                    if(end<=mid1) {//上半段早退
                        interval=Math.min(end,mid0)-Math.max(start,start1);
                    } else { //下半段下班或早退
                        interval=mid0-Math.max(start,start1)+Math.min(end,end0)-mid1;
                    }
                } else { //下半段上班
                    interval=Math.min(end,end0)-Math.max(start,mid1);
                }
                var val=interval>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*interval/60).toFixed(2);
                sql.push(`replace into attendance(gid,uid,type,start,end,interval,val)
                     values(@{!gid},@{uid},'WORK',`, start, ',', end, ',', interval, ',', val, ')');
                sql.push(`update exception set state='OK'
                 where uid=@{uid} and day=@{day} and state='WAIT'`);
                DB.sql(sql.join(''));
                "
            ]
        }
    ],
    
    "response":[]
},

{
    "name" : "reject",
    "method" : "PUT",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "拒绝员工工时修改",
    
    "request": [
        {"name":"uid", "type":"int", "must":true, "comment":"员工帐号ID"},
        {"name":"day", "type":"int", "must":true, "comment":"日期，yyyyMMdd"}
    ],
    
    "process" : [
        {"macro":"is_his_leader", "#UID#":"@{uid}"},
        {
            "name" : "reject",
            "type" : "rdb",
            "db" : "attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [
                "update exception set state='REJ'
                 where uid=@{uid} and day=@{day} and state='WAIT'`"
            ]
        }
    ],
    
    "response":[]
},

{
    "name" : "check",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "APP-schedule",
    "comment" : "检查当天的考勤异常，由schedule服务每天定时调用。
        逻辑类似headProcess;do{ process }while(...);tailProcess",

    "request": [
        {"name":"taskId", "type":"long", "must":true, "min":0, "comment":"任务ID"},
        {"name":"tag", "type":"string", "must":true, "min":10, "comment":"一次执行的标识"}
    ],

    "vars":[
        {"name":"curDay", "val":"@{NOW|unit86400000}"},
        {"name":"day", "val":"@{SUB|i, curDay, 1}"}, //检查前面一天的考勤数据
        {"name":"dayStart", "val":"@{MULTI|i,day,1440}"},
        {"name":"dayEnd", "val":"@{ADD|int,dayStart,1440}"},
        {"name":"foreDay", "val":"@{SUB|i,dayStart,1440}"},
        {"name":"offset", "val":"0", "comment":"偏移"},
        {"name":"num", "val":"100", "comment":"批量，一次不宜过多，100以内"}
    ],

    "headProcess" : [{
        "name" : "get_base_infos",
        "type" : "rdb",
        "db" : "hr",
        "sqls" : [
            {
                "name" : "get_employee_num",
                "metas" : "each",
                "merge" : true,
                "multi" : false,
                "sql" : "select count(*) employee_num from employee where state='NORM'"
            },
            {
                "name" : "worktimes",
                "metas" : "each",
                "merge" : false,
                "multi" : true,
                "sql" : "select id,first,second,third,forth,leadTime,calendar from worktime"
            },
            {
                "name" : "caldays",
                "metas" : "none",
                "merge" : false,
                "multi" : true,
                //查询两天，因为此处不知道时区偏移，只能用0时区
                //如果连续两天都无工作日，在此处就结束了
                "sql" : "select calendar,day from caldays
                     where calendar in(@[LIST|!worktimes,``,`calendar`])
                       and day>@{UTC|foreDay,0,'yyyyMMdd',60000}
                       and day<@{UTC|dayEnd,0,'yyyyMMdd',60000}
                       and type='W'"
            }
        ],
        "onSuccess" : "
            var worktimes=@{!worktimes};
            var map1={};
            for(var w of worktimes) {
                map1[w.id]=w; //worktime_id->worktime
            }
            var caldays=@{!caldays};
            var map2={};
            for(var c of caldays) {
                map2[c[0]+'_'+c[1]]=true; //calendar_day->true/false
            }
            //覆盖从数据库获取的数据
            Mesh.success({\"worktimes\":map1,\"caldays\":map2});
        "
    }],
    
    "process" : [
        {
            "name" : "get_employees",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [{
                "name" : "employees",
                "metas" : "each",
                "merge" : false,
                "multi" : true,
                "sql" : "select E.uid,M.gid,Z.timeOff,E.worktime wt
                 from employee E,office O,zone Z,member M, grp G
                  where E.state='NORM' and O.id=E.office and Z.id=O.zone
                   and M.uid=E.uid and M.role='NOR'
                   and G.id=M.gid and G.type='D'
                   ORDER BY E.uid asc
                   LIMIT @{num} OFFSET @{offset}"
            }]
        },
        {
            "name" : "get_attendance",
            "type" : "rdb",
            "db" : "attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [{
                "name" : "attendances",
                "metas" : "none",
                "merge" : false,
                "multi" : true,
                "ignores":["NOT_EXISTS"],//一天的考勤数据，如果没有，可能为非工作日，或忘刷卡
                "sql" : "select uid,start,end,type from attendance
                  where uid in(@{LIST|!employees,``,`uid`})
                   and type in('WORK','AFFA','BUSI','SICK','HOLI','WEAL')
                   and start>@{dayStart} and start<@{dayEnd}
                   order by uid,start asc"
            }]
        },
        {
            "name" : "check_attendance", //与get_attendance分开，是为了不把js发到webdb中
            "type" : "rdb",
            "db" : "attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : ["js:
                var caldays=@{!caldays}; //calendar-day->true/false
                var worktimes=@{!worktimes};
                var employees=@{!employees};
               
                var list=@{IFNULL|!attendances,`[]`,obj};
                var eMap={}; //一天中，一个帐号可能有多个考勤记录，比如上午请假，下午上班
                var uid;
                for(var l of list) {
                    uid=l[0];
                    if(!eMap[uid]) {
                        eMap[uid]=[]
                    }
                    eMap[uid].push({start:l[1],end:l[2],type:l[3]});//按start排序
                }
                
                var sqls=['replace into exception(gid,uid,day,start,end) values'];
                var atd,foreAd; //当前考勤与前一个考勤
                var start0, start1, end0, end1, mid0, mid1;
                var start, end;//开始结束
                var excNum=0; //考勤异常数量
                var wt;//作息时间
                var day;
                var continuous=true;
                var dayStart;

                var date=new Date();
                //当前时间的时区偏移量，单位分钟，东区为负值，e.timeOff东区为正值
                const srvOff=date.getTimezoneOffset();
    
                for(var e of employees) { //按雇员，逐个检查当天的考勤数据
                    if(e.wt==0) continue; //自由工作时间的员工，不检查
                    date.setTime((@{dayStart}+srvOff+e.timeOff)*60000);//改变时区为指定时区
                    day=date.getFullYear()*10000+(date.getMonth()+1)*100+date.getDate();
                    wt=worktimes[e.wt];
                    if(!caldays[wt.calendar+'_'+day]) {
                        continue; //不是工作日不必检查
                    }
                    list=eMap[e.uid];
                    if(!list||(list.length)<1) {
                        if(excNum>0)sqls.push(',');
                        sqls.push('(', e.gid, ',', e.uid, ',', day, ',0,0)');
                        excNum++;
                        continue; //工作日，无考勤记录
                    }
                    dayStart=@{dayStart}-e.timeOff;
                    start1=dayStart+wt.first; //上班卡最迟时间
                    start0=start1-wt.leadTime;//上班卡最早时间
                    end0=dayStart+wt.forth; //下班卡最早时间
                    end1=start0+1440; //下班卡结束时间
                    mid0=dayStart+wt.second; //上午下班时间
                    mid1=dayStart+wt.third; //下午开始时间

                    foreAtd=list[0];
                    start=foreAtd.start;
                    end=foreAtd.end;
                    
                    //全天的肯定在排在最前面，因为start肯定最小，如有全天记录，则直接跳过
                    if(start>=start0 && start<=start1 && end>=end0 && end<end1) {
                        continue;
                    }
                    continuous = true;
                    for(var atd of list) {//同一帐号有多次记录，比如事假、延迟加班
                        if(atd.start<start) {
                            start=atd.start;
                        }
                        if(atd.end>end) {
                            end=atd.end;
                        }
                        //记录之间必须前后衔接，中间休息时段不算
                        if(foreAtd.end>=atd.start||(foreAtd.end>=mid0 && atd.start<=mid1)) {
                            foreAtd=atd;
                        } else {
                            continuous = false; //不连续
                            break;
                        }
                    }
                    
                    if(continuous && start>=start0 && start<=start1 && end>=end0 && end<end1) {
                        continue; //连续的，且覆盖了全部工作时间
                    }
                    if(excNum>0)sqls.push(',');
                    sqls.push('(', e.gid, ',', e.uid, ',', day, ',', start, ',', end, ')');
                    excNum++;
                }

                if(excNum>0) {
                    DB.sql(sqls.join(''));
                } else {
                    DB.sqlError(RetCode.OK, 'ok');
                }
            "]
        }
    ],

    "while":"
        if(@{#code}==RetCode.OK) {
            var offset=@{offset}+@{num};
            if(offset>=@{!employee_num}) {
                Mesh.error(RetCode.LOOP_OVER, 'over');
            } else {
                //覆盖offset，while处理中对返回data做了特殊处理，放入request中
                Mesh.success({offset:offset});
            }
        } else {
            Mesh.error(@{#code}, 'over');
        }
    ",
    
    "tailProcess" : [{
        "name" : "callback",
        "type" : "call",
        "service" : "schedule",
        "method" : "GET",
        "url" : "/report_result?taskId=@{taskId}&tag=@{tag}&code=@{#code}&info=@{URL|encode,#info}",
        "tokenSign" : "APP",
        "comment" : "检查完成后，执行此回调，通知schedule执行情况"
    }],

    "response":[]
}
]