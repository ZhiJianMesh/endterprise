[
{
    "name" : "getApply",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "查看加班、请假与工作日在途申请详情",

    "request": [
        {"name":"id", "type":"int", "must":true, "comment":"申请id"}
    ],

    "process" : [
        {
            "name" : "get_apply_times",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [
                {
                    "name" : "apply_info",
                    "metas" : "each",
                    "multi" : false,
                    "merge" : true,
                    "sql" : "select uid,account,type,state from applies where id=@{id}"
                },
                {
                    "name" : "times",
                    "multi" : true,
                    "merge" : false,
                    "metas" : "each",
                    "sql" : "select type,start,end,cmt from atdtime where aid=@{id}"
                }
            ]
        },
        //查看自己的申请，无需确认，否则确认为部门经理
        {"macro":"is_his_leader", "#UID#":"@{!uid}",
         "when":"@{CONDITION|!uid,'i.!=',#tokenCaller}"}
    ]
},

{
    "name" : "clock",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "上班或下班打卡记录。请假时段刷卡会失败。
    每次打卡，都要扣除请假后再计算工资，汇总月工资时只需求和即可",

    "vars": [
        {"name":"cur", "val":"@{NOW|unit60000}"},
        {"name":"YEAR", "val":"@{NOW|`yyyy`}", "comment":"用于分库"}
    ],

    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name" : "user_base_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select E.worktime,E.hSalary,E.dSalary,Z.timeOff,M.gid,
                            W.first,W.second,W.third,W.forth,W.leadTime,W.midClock,W.calendar
                         from employee E,office O,zone Z,worktime W,member M,grp G
                         where E.uid=@{#tokenCaller}
                          and O.id=E.office and Z.id=O.zone
                          and W.id=E.worktime
                          and M.uid=@{#tokenCaller} and M.role='NOR'
                          and G.id=M.gid and G.type='D'"
                },
                {
                    "name" : "days",
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select day,type from caldays where calendar=@[!calendar]
                        and day>@[UTC|@{cur},!timeOff,'yyyyMMdd',60000]-1
                        and day<@[UTC|@{cur},!timeOff,'yyyyMMdd',60000]+1"
                }
            ],
            //计算刷卡时段
            "onSuccess":"
                var clkStart,clkEnd;//用于查找开始打卡记录
                var start,end;
                var dayStart=@{NOW|unit86400000}*1440-@{!timeOff};
                var start0=dayStart+@{!first}-@{!leadTime};
                
                if(@{cur}>=start0)start=start0; //处在当前刷卡周期
                else start=start0-1440;//处在上一个刷卡周期
                end=start+1440;
                
                if('@{!midClock}'=='N') { //午休不打卡
                    clkStart=start;
                    clkEnd=end;
                } else {
                    if(@{cur}<start0) {//处在上一个刷卡周期，算作前一天的下午
                        dayStart-=1440;
                        clkStart=dayStart+@{!second};//以上午结束时间为下午刷卡起点
                        clkEnd=dayStart+@{!forth};
                    } else if(@{cur}>dayStart+@{!third}) {//当天下午
                        clkStart=dayStart+@{!second};
                        clkEnd=dayStart+@{!forth};
                    } else { //当天上午或中午，可能是上午下班，也可能是下午上班
                        clkStart=start0;
                        clkEnd=dayStart+@{!second};
                    }
                }
                Mesh.success({clkStart:clkStart,clkEnd:clkEnd,dayStart:start,dayEnd:end});
            "
        },
        {
            "name" : "free_worktime",
            "type" : "static",
            "when" : "@{CONDITION|!worktime,'i.==',0}", //为0时，工作时间自由，无需刷卡
            "data" : "{\"start\":0,\"end\":0}"
        },
        {
            "name" : "get_clock_time",
            "type" : "rdb",
            "db" : "attendance",
            "when" : "@{CONDITION|!worktime,'i.!=',0}", //为0时，工作时间自由，无需刷卡
            "sharding" : "@{YEAR}",
            "sqls" : [{
                "name":"recent_clock_time",
                "metas": "each",
                "merge": true,
                "multi": false,
                "isWrite": false,
                "ignores": ["NOT_EXISTS"],
                "sql": "select start,end from attendance
                    where uid=@{#tokenCaller} and type='WORK'
                     and start>@{!clkStart}-1 and start<@{!clkEnd}+1"
            }]
        },
        {
            "name" : "get_applies",
            "type" : "rdb",
            "db" : "log",
            "when" : "@{CONDITION|!worktime,'i.!=',0}", //为0时，工作时间自由，无需刷卡
            "sharding" : "@{YEAR}",
            "sqls" : [{
                "name": "applyTimes", //请假时段
                "metas": "each",
                "merge": false,
                "multi": true,
                "ignores": ["NOT_EXISTS"],
                "sql": "select end,start from atdtime
                    where uid=@{#tokenCaller}
                     and start>@{!dayStart}-1 and start<@{!dayEnd}+1
                     and type in('AFFA','BUSI','WEAL','HOLI')
                   order by start asc"
            }]
        },
        {
            "name" : "clock_in", //上班卡
            "type" : "rdb",
            "db" : "attendance",
            "when" : "@{CONDITION|!worktime,'i.!=',0}
                     && @{CONDITION|!start,'s.==', ''}", 
            "sharding" : "@{YEAR}",
            "sqls" : ["js:var inFree=false;
                var applyTimes=@{IFNULL|!applyTimes,'[]',obj};
                for(var f of applyTimes) {
                    //休假结束前不可刷卡，此处存在一些制度漏洞
                    inFree = @{cur}<f.end-@{!leadTime}&&@{cur}>f.start;
                    if(inFree) break;
                }
                if(inFree) {
                    DB.sqlError(6011,'clock in free time');
                } else {
                    DB.sql(`insert into attendance(gid,uid,type,start,end)
                     values(@{!gid},@{#tokenCaller},'WORK',@{cur},@{cur})`);
                }
            "],
            "onSuccess" : "{start:@{cur},end:0}"
        },
        {
            "name" : "clock_out",
            "type" : "rdb",
            "db" : "attendance",
            //为0时，工作时间自由，无需刷卡
            //!start不为空，表示刷过一次，本次是下班卡
            "when" : "@{CONDITION|!worktime,'i.!=',0}
                     || @{CONDITION|!start,'s.!=', ''}", 
            "sharding" : "@{YEAR}",
            "sqls" : ["js:
                var dayStart=@{NOW|unit86400000}*1440-@{!timeOff};
                var mid0=dayStart+@{!second};//上午下班时间
                var midClock='@{!midClock}'=='Y';
                //午休需打卡的情况，上午已打卡，现在打下午上班卡
                if(midClock && @{!end}>mid0 && @{!start}<mid0) {
                    //如果下午有请假，没有限制刷卡提前量，因为中午休息时间本身不长
                    DB.sql(`insert into attendance(gid,uid,type,start,end)
                     values(@{!gid},@{#tokenCaller},'WORK',@{cur},@{cur})`);
                } else {
                    var WHOLEDAY=@{!forth}-@{!first}-(@{!third}-@{!second});
                    var days=@{IFNULL|!days,`{}`,obj};
                    var start1=dayStart+@{!first}; //规定的上班刷卡时间
                    var start0=start1-@{!leadTime};//上班刷卡开始时间
                    var end0=dayStart+@{!forth};//规定的下班时间
                    var end1=start0+1440;//下班刷卡结束时间
                    var mid1=dayStart+@{!third};//下午上班时间
                    var start=@{!start}; //实际开始刷卡时间
                    var interval=0;
                    var adjEnd,adjStart; //根据作息调整后的开始结束时间
    
                    if(midClock) {//午休需刷卡
                        if(@{cur}<mid1) {//上午下班卡
                            adjEnd=Math.min(@{cur},mid0);
                            adjStart=Math.max(start,start1);
                        } else { //下午下班卡
                            adjEnd=Math.min(@{cur},end0);
                            adjStart=Math.max(start,mid1);
                        }
                    } else if(@{cur}<mid1) { //上半段刷下班卡
                        adjEnd=Math.min(@{cur},mid0);
                        adjStart=Math.max(start,start1);
                    } else { //下半段刷下班卡
                        adjEnd=Math.min(@{cur},end0);
                        if(start<mid0) { //上午刷的上班卡，正常情况都走到这里
                            adjStart=Math.max(start,start1);
                            interval=-(mid1-mid0);//扣除中午休息时间
                        } else { //下午刷的上班卡
                            adjStart=Math.max(start,mid1);
                        }
                    }
                    interval+=adjEnd-adjStart;
                    
                    var dt=new Date();
                    dt.setTime((start+dt.getTimezoneOffset()+@{!timeOff})*60000);
                    var cd=dt.getFullYear()*10000+(dt.getMonth()+1)*100+dt.getDate();
                    var val=0;
                    if(days[cd]=='W') { //工作日才需要判断请假，计算工资
                        var applyTimes=@{IFNULL|!applyTimes,'[]',obj};
                        for(var f of applyTimes) {//扣除重叠的请假时间
                            if(f.end<=adjStart||f.start>=adjEnd) {
                                continue; //无交集
                            }
                            //以下可以兼容午休打卡的情况
                            interval-=Math.min(f.end,adjEnd)-Math.max(f.start,adjStart);
                            if(f.start<mid0&&f.end>mid1) { //上午开始请假，下午结束
                                interval+=(mid1-mid0);//多减了中午休息时间
                            }
                        }
                        val=interval>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*interval/60).toFixed(2);
                    }
                    DB.sql('update attendance set end=@{cur},interval='+interval+',val='+val
                        +` where uid=@{#tokenCaller} and type='WORK' and start=@{!start}`);
                }
                "
            ],
            "onSuccess" : "{start:@{!start},end:@{cur}}"
        }
    ],
    "response":[
        {"name":"start", "type":"int", "must":true, "comment":"开始时间"},
        {"name":"end", "type":"int", "must":true, "comment":"结束时间"}
    ]
},
{
    "name" : "clockAt",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "查询当天的上班、下班打卡记录",
    
    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [{
                "name" : "base_info",
                "metas" : "each",
                "merge" : true,
                "multi" : false,
                "sql" : "select E.worktime,Z.timeOff,W.first,W.leadTime
                     from employee E,office O,zone Z,worktime W
                     where E.uid=@{#tokenCaller}
                      and O.id=E.office and Z.id=O.zone
                      and W.id=E.worktime"
            }]
        },
        {
            "name" : "free_worktime",
            "type" : "static",
            "when" : "@{CONDITION|!worktime,'i.==',0}", //为0时，工作时间自由，无刷卡时间
            "data" : "{\"start\":0,\"end\":0}"
        },
        {
            "name":"get_start_end",
            "type":"var", //使用var，避免在sql中使用js，提升效率
            "vars":{
                "cur":"@{NOW|unit60000}",
                "dayStart":"@{DIV|i, cur, 1440}",
                "start0":"@{CALCULATE|i,`@{dayStart}*1440-@{!timeOff}+@{!first}-@{!leadTime}`}",
                "foreStart":"@{SUB|i, start0, 1440}",
                //如果在上一个刷卡周期，则开始时间回到前一天开始刷卡时间
                "start":"@{CONDITION|cur,'i.>',start0,start0,foreStart}",
                "end":"@{ADD|i, start, 1440}"
            }
        },
        {
            "name" : "get_clock_time",
            "type" : "rdb",
            "db" : "attendance",
            "when" : "@{CONDITION|!worktime,`i.!=`,0}", //为0时，工作时间自由，无需刷卡
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [{
                "name":"clockTimes",
                "metas" : "each",
                "merge" : false,
                "multi" : true,
                "sql" : "select start,end from attendance
                     where uid=@{#tokenCaller} and type='WORK'
                       and start>@{start} and start<@{end}
                     order by start asc"
            }]
        }
    ],
    "response":[
        {"name":"clockTimes", "type":"object", "must":true, "list":true, "props":[
            {"name":"start", "type":"int", "must":true, "comment":"开始时间"},
            {"name":"end", "type":"int", "must":true, "comment":"结束时间"}
        ]}
    ]
},
{
    "name" : "leave",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "请假申请。
        WEAL福利假，比如三八节、体检是福利假，不扣工资，这些假不是统一的，可按小时请；
        HOLI年休假，必须按天请，不扣工资，按天请；
        AFFA事假，按分钟请，扣全额工资，可按小时请；
        SICK病假，扣部分工资，每个员工根据工作年限，扣工资额度不同，可按小时请。",

    "request": [
        {"name":"id", "type":"int", "must":false, "comment":"申请id，不为空时，表示已生成applies记录"},
        {"name":"times", "type":"object", "must":true, "list":true, "minSize":1, "props":[
            {"name":"type", "type":"string", "must":true, "comment":"类型",
             "options":["HOLI","WEAL","AFFA","SICK"]},
            {"name":"start", "type":"int", "must":true, "comment":"请假开始时间，UTC分钟"},
            {"name":"end", "type":"int", "must":true, "biggerThan":"start", "comment":"请假结束时间，UTC分钟"},
            {"name":"cmt", "type":"string", "must":true, "comment":"描述"}
        ], "comment":"请假时间段，可以多个"}
    ],
    
    "vars":[
        {"name":"minStart", "val":"@{MIN|i,times,'start'}"},
        {"name":"maxEnd", "val":"@{MAX|i,times,'end'}"}
    ],

    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name":"employee_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select e.weal,e.holiday,z.timeOff,m.gid,
                            e.sickRatio,e.dSalary,e.hSalary,
                            w.first,w.second,w.third,w.forth,w.calendar
                         from employee e,office o,zone z,worktime w,member m,grp g
                         where e.uid=@{#tokenCaller} and o.id=e.office
                          and z.id=o.zone and w.id=e.worktime
                          and m.uid=@{#tokenCaller} and m.role<>'ADM'
                          and g.id=m.gid and g.type='D'"
                },
                {
                    "name" : "days",
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select day,type from caldays where calendar=@[!calendar]
                        and day>@[UTC|@{minStart},!timeOff,'yyyyMMdd',60000]-1
                        and day<@[UTC|@{maxEnd},!timeOff,'yyyyMMdd',60000]+1"
                }
            ]
        },
        {
            "name" : "get_apply_id",
            "type" : "var",
            "when" : "@{CONDITION|id,'s.==',''}",
            "vars":{
                "id":"@{SEQUENCE|'applyid'}"
            }
        },
        {
            "name":"save_apply",
            "type":"rdb",
            "db":"log",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [
                {
                    "name":"oldApplies",
                    "metas":"each",
                    "merge":false,
                    "multi":true,
                    "toResp":false,
                    "ignores":["NOT_EXISTS"],
                    "sql":"select start,end from atdtime
                        where uid=@{#tokenCaller} and start>@{minStart}-1
                         and start<@{maxEnd}+1 and aid<>@{id}
                        union
                        select start,end from atdtime
                        where uid=@{#tokenCaller} and end>@{minStart}-1
                         and end<@{maxEnd}+1 and aid<>@{id}"
                },

                "js:
                function hasOverlap(intervals) {
                    intervals.sort((a,b) => a.start-b.start);
                    for(let i=0; i<intervals.length-1; i++) {
                        if(intervals[i].end>intervals[i+1].start) {
                            return true;
                        }
                    }
                    return false;
                }
                function duration(req, days) {
                    var start=req.start;
                    var end=req.end;
                    if(end-start>1440||end-start<60) { //连续时间段必须在24小时之内，且必须大于1小时
                        return {code:6001,info:'invalid start,end'};
                    }
                    
                    var dt=new Date();
                    dt.setTime((start+dt.getTimezoneOffset()+@{!timeOff})*60000);
                    var cd=dt.getFullYear()*10000+(dt.getMonth()+1)*100+dt.getDate();
                    if(days[cd]!='W') {//非工作日，不必请假
                        return {code:6007,info:`needn't apply leave on free days`};
                    }
                    var dayStart=1440*Math.round(start/1440)-@{!timeOff};
                    var first=dayStart+@{!first};
                    var mid0=dayStart+@{!second};
                    var mid1=dayStart+@{!third};
                    var forth=dayStart+@{!forth};
                    var t;
                    if(start<mid0) { //上半段开始
                        start=Math.max(first,start);
                        if(end<=mid1) { //上半段结束
                            end=Math.min(end,mid0);
                            t=end-start;
                        } else {//下半段结束
                            end=Math.min(forth,end);
                            t=mid0-start + end-mid1;
                        }
                    } else {//下半段开始
                        start=Math.max(mid1,start);
                        end=Math.min(end,forth);
                        t=end-start;
                    }
                    if(t<=0) {//非工作时段，不必请假
                        return {code:6007,info:`needn't apply leave at free time`};
                    }
                    return {code:0,t:t,start:start,end:end};
                }

                (function(){
                var WHOLEDAY=@{!forth}-@{!first}-(@{!third}-@{!second});
                var days=@{IFNULL|!days,`{}`,obj};
                var times=@{times};
                var oldApplies=@[IFNULL|!oldApplies,`[]`,obj];
                var val;
                var totalWeal=0, totalHoli=0, dur;
                var sqls=[
                    'delete from atdtime where aid=@{id};', //更新的情况，数据已存在
                    'insert into atdtime(aid,uid,start,end,duration,val,type,cmt) values'
                ];
                
                var intervals=oldApplies.concat(times);
                if(hasOverlap(intervals)) {
                    return DB.sqlError(6010, `time overlapped`);
                }

                var t;
                for(var i in times) {
                    t = times[i];
                    dur=duration(t,days);
                    if(dur.code!=0) {
                        var dt=new Date(t.start*60000);
                        return DB.sqlError(dur.code,dur.info+','+dt.toLocaleString());
                    }
                    val=0; //扣薪
                    if(t.type=='HOLI') {//年休假，必须按天请，不扣薪
                        if(dur.t<WHOLEDAY) {
                            return DB.sqlError(6003,`holiday can't be split`);
                        }
                        totalHoli++;
                        if(totalHoli>@{!holiday}) {//年休假余额不足
                            return DB.sqlError(6004,'holiday not enough');
                        }
                        dur.t=1;
                        val=@{!dSalary};
                    } else if(t.type=='WEAL') {//福利假，按小时请，不扣薪
                        if((dur.t%60)!=0) {
                            return DB.sqlError(6005,`weal can't be split`);
                        }
                        dur.t=Math.round(dur.t/60);
                        totalWeal+=dur.t;
                        if(totalWeal>@{!weal}) {
                            return DB.sqlError(6006,'weal not enough');
                        }
                        val=dur.t>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*dur.t/60).toFixed(2);
                    } else if(t.type=='SICK') { //病假，部分扣减
                        val=dur.t>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*dur.t/60);
                        val=(val*@{!sickRatio}).toFixed(2);
                    } else if(t.type=='AFFA') {
                        val=0;//事假，全部扣减
                    }
                    if(i>0)sqls.push(',');
                    sqls.push('(@{id},@{#tokenCaller},', dur.start, ',', dur.end,
                              ',', dur.t, ',', val, `,'`, t.type, `','`, t.cmt, `')`);
                }
                return DB.sql(sqls.join(''));
                })()",

                "replace into applies(id,uid,gid,account,type)
                 values(@{id},@{#tokenCaller},@{!gid},'@{#tokenAcc}','LEAV')"
            ]
        }
    ],
    "response":[]
},
{
    "name" : "onBusiness",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "在途申请。如果能远程打卡或异地打卡，则无需申请",

    "request": [
        {"name":"id", "type":"int", "must":false, "comment":"申请id，不为空时，表示已生成applies记录"},
        {"name":"times", "type":"object", "must":true, "list":true, "minSize":1, "props":[
            {"name":"type", "type":"string", "must":true, "comment":"类型", "options":["BUSI"]},
            {"name":"start", "type":"int", "must":true, "comment":"请假开始时间，UTC分钟"},
            {"name":"end", "type":"int", "must":true, "biggerThan":"start", "comment":"请假结束时间，UTC分钟"},
            {"name":"cmt", "type":"string", "must":true, "comment":"描述"}
        ], "comment":"在途时间段，可以多个"}
    ],
    
    "vars":[
        {"name":"minStart", "val":"@{MIN|i,times,'start'}"},
        {"name":"maxEnd", "val":"@{MAX|i,times,'end'}"}
    ],

    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name":"employee_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select z.timeOff,e.dSalary,e.hSalary,
                            w.first,w.second,w.third,w.forth,w.calendar
                         from employee e,office o,zone z,worktime w
                         where e.uid=@{#tokenCaller} and o.id=e.office
                          and z.id=o.zone and w.id=e.worktime"
                },
                {
                    "name":"get_gid",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select m.gid from member m,grp g
                        where m.uid=@{#tokenCaller} and m.role<>'ADM'
                        and g.id=m.gid and g.type='D'"
                },
                {
                    "name" : "days",
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select day,type from caldays where calendar=@[!calendar]
                        and day>@[UTC|@{minStart},!timeOff,'yyyyMMdd',60000]-1
                        and day<@[UTC|@{maxEnd},!timeOff,'yyyyMMdd',60000]+1"
                }
            ]
        },
        {
            "name" : "get_apply_id",
            "type" : "var",
            "when" : "@{CONDITION|id,'s.==',''}",
            "vars":{
                "id":"@{SEQUENCE|'applyid'}"
            }
        },
        {
            "name" : "get_old_applies",
            "type" : "rdb",
            "db":"log",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [
                {
                    "name":"oldApplies",
                    "metas" : "each",
                    "merge":false,
                    "multi":true,
                    "toResp":false,
                    "ignores" : ["NOT_EXISTS"],
                    "sql":"select start,end from atdtime
                        where uid=@{#tokenCaller} and start>@{minStart}-1
                         and start<@{maxEnd}+1 and aid<>@{id}
                        union
                         select start,end from atdtime
                        where uid=@{#tokenCaller} and end>@{minStart}-1
                         and end<@{maxEnd}+1 and aid<>@{id}"
                },
                
                "js:
                function hasOverlap(intervals) {
                    intervals.sort((a,b) => a.start-b.start);
                    for(let i=0; i<intervals.length-1; i++) {
                        if(intervals[i].end>intervals[i+1].start) {
                            return true;
                        }
                    }
                    return false;
                }
                function duration(req, days) {
                    var start=req.start;
                    var end=req.end;
                    if(end-start>1440||end-start<60) {//连续时间段必须在24小时之内，且大于1小时
                        return {code:6001,info:'invalid start,end'};
                    }
                    
                    var dt=new Date();
                    dt.setTime((start+dt.getTimezoneOffset()+@{!timeOff})*60000);
                    var cd=dt.getFullYear()*10000+(dt.getMonth()+1)*100+dt.getDate();
                    if(days[cd]!='W') {//非工作日，不必填在途，根据公司制度确定是否填加班单
                        return {code:6009,info:`needn't apply busi on free days`}
                    }
                    var dayStart=1440*Math.round(start/1440)-@{!timeOff};
                    var first=dayStart+@{!first};
                    var mid0=dayStart+@{!second};
                    var mid1=dayStart+@{!third};
                    var forth=dayStart+@{!forth};
                    var t=0;
                    
                    if(start<mid0) { //上半段开始
                        start=Math.max(first,start);
                        if(end<=mid1) { //上半段结束
                            end=Math.min(end,mid0);
                            t=end-start;
                        } else {//下半段结束
                            end=Math.min(forth,end);
                            t=mid0-start+end-mid1;
                        }
                    } else { //下半段开始
                        start=Math.max(mid1,start);
                        end=Math.min(end,forth)
                        t=end-start;
                    }
                    if(t<=0) {//非工作时段，不必请假
                        return {code:6007,info:`needn't apply busi at free time`};
                    }
                    return {code:0,t:t,start:start,end:end};
                }
                
                (function(){
                var WHOLEDAY=@{!forth}-@{!first}-(@{!third}-@{!second});
                var days=@{IFNULL|!days,`{}`,obj};
                var times=@{times};
                var oldApplies=@[IFNULL|!oldApplies,`[]`,obj];
                var val;
                var totalWeal=0, totalHoli=0, dur;
                var sqls=[
                    'delete from atdtime where aid=@{id};', //更新的情况，数据已存在
                    'insert into atdtime(aid,uid,start,end,duration,val,type,cmt) values'
                ];
                
                var intervals=oldApplies.concat(times);
                if(hasOverlap(intervals)) {
                     return DB.sqlError(6010,'time overlapped');
                }

                var t;
                for(var i in times) {
                    t = times[i];
                    dur=duration(t,days);
                    if(dur.code!=0) {
                        var dt=new Date(t.start*60000);
                        return DB.sqlError(dur.code,dur.info+','+dt.toLocaleString());
                    }
                    if(i>0)sqls.push(',');
                    val=dur.t>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*dur.t/60).toFixed(2);
                    sqls.push('(@{id},@{#tokenCaller},', dur.start, ',', dur.end,
                              ',', dur.t, `,`, val, `,'`, t.type, `','`, t.cmt, `')`);
                }
                return DB.sql(sqls.join(''));
                })()",
                
                "replace into applies(id,uid,gid,account,type)
                 values(@{id},@{#tokenCaller},@{!gid},'@{#tokenAcc}','BUSI')"
            ]
        }
    ],
    "response":[]
},

{
    "name" : "overtimework",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "加班、延长工时申请。
        WOW工作日延长工作时间，必须是工作时段之外；
        OOW休息日加班，比如周六、周日加班；
        FOW节假日加班，比如国庆、春节加班",
    
    "request": [
        {"name":"id", "type":"int", "must":false, "comment":"申请id"},
        {"name":"times", "type":"object", "must":true, "list":true, "minSize":1, "props":[
            {"name":"type", "type":"string", "must":true, "comment":"类型", "options":["OTW","WOW","OOW","FOW"]},
            {"name":"start", "type":"int", "must":true, "comment":"加班开始时间，UTC分钟"},
            {"name":"end", "type":"int", "must":true, "biggerThan":"start", "comment":"加班结束时间，UTC分钟"},
            {"name":"cmt", "type":"string", "must":true, "comment":"描述"}
        ], "comment":"请假时间段，可以多个"}
    ],

    "vars":[
        {"name":"minStart", "val":"@{MIN|i,times,'start'}"},
        {"name":"maxEnd", "val":"@{MAX|i,times,'end'}"}
    ],
    
    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name":"employee_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select z.timeOff,z.fowSalary,z.oowSalary,z.wowSalary,
                            e.worktime,e.hSalary,
                            w.first,w.second,w.third,w.forth,w.leadTime,w.calendar
                         from employee e,office o,zone z,worktime w
                         where e.uid=@{#tokenCaller} and o.id=e.office
                          and z.id=o.zone and w.id=e.worktime"
                },
                {
                    "name":"get_gid",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select m.gid from member m,grp g
                        where m.uid=@{#tokenCaller} and m.role<>'ADM'
                        and g.id=m.gid and g.type='D'"
                },
                {
                    "name" : "days",
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select day,type from caldays where calendar=@[!calendar]
                        and day>@[UTC|@{minStart},!timeOff,'yyyyMMdd',60000]-1
                        and day<@[UTC|@{maxEnd},!timeOff,'yyyyMMdd',60000]+1"
                }
            ]
        },
        {
            "name":"get_apply_id",
            "type" : "var",
            "when" : "@{CONDITION|id,'s.==',''}",
            "vars":{
                "id":"@{SEQUENCE|'applyid'}"
            }
        },
        {
            "name" : "save_apply",
            "type" : "rdb",
            "db":"log",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [
                {
                    "name":"oldApplies",
                    "metas":"each",
                    "merge":false,
                    "multi":true,
                    "toResp":false,
                    "ignores":["NOT_EXISTS"],
                    "sql":"select start,end from atdtime
                        where uid=@{#tokenCaller} and start>@{minStart}-1
                         and start<@{maxEnd}+1 and aid<>@{id}
                        union
                         select start,end from atdtime
                        where uid=@{#tokenCaller} and end>@{minStart}-1
                         and end<@{maxEnd}+1 and aid<>@{id}"
                },

                "js:
                function hasOverlap(intervals) {
                    intervals.sort((a,b) => a.start-b.start);
                    for(let i=0; i<intervals.length-1; i++) {
                        if(intervals[i].end>intervals[i+1].start) {
                            return true;
                        }
                    }
                    return false;
                }
                function duration(req, days) {
                    var start=req.start;
                    var end=req.end;
                    //连续时间段必须在24小时之内，多天的，提交多条
                    if(end-start>1440||end-start<60) {
                      return {code:6001,info:'invalid start or end'};
                    }

                    var dt=new Date();
                    dt.setTime((start+dt.getTimezoneOffset()+@{!timeOff})*60000)
                    var cd=dt.getFullYear()*10000+(dt.getMonth()+1)*100+dt.getDate();
                    var dType=days[cd];

                    var dayStart=1440*Math.round(start/1440)-@{!timeOff};
                    var first=dayStart+@{!first};
                    var mid0=dayStart+@{!second};
                    var mid1=dayStart+@{!third};
                    var forth=dayStart+@{!forth};
                    if(dType!='W') {//休息日或节假日加班，按平时作息判断加班时长
                        var t;
                        if(start<mid0) { //上半段开始
                          start=Math.max(first,start);
                          if(end<=mid1) { //上半段结束
                            end=Math.min(end,mid0);
                            t=end-start;
                          } else { //下半段结束
                            end=Math.min(forth,end);
                            t=mid0-start+end-mid1;
                          }
                        } else {//下半段开始
                          start=Math.max(mid1,start);
                          end=Math.min(end,forth);
                          t=Math.min(end,forth)-Math.max(mid1,start); 
                        }
                        return {code:0,t:t,tp:dType,start:start,end:end};
                    }
                    //工作日延长工时，只算下班到第二天上班打卡之前
                    if(start>=forth && end<first+1440-@{!leadTime}) {
                        return {code:0,t:end-start,start:start,end:end,tp:dType};
                    }
                    return {code:6008,info:`can't overtime work at worktime`};//上班时段，不得加班
                }
                
                (function(){
                var days=@{IFNULL|!days,`{}`,obj};
                var times=@{times};
                var oldApplies=@[IFNULL|!oldApplies,`[]`,obj];
                var val;
                var dur;
                var appType;
                var ratio;
                var sqls=[
                    'delete from atdtime where aid=@{id};',
                    'insert into atdtime(aid,uid,start,end,duration,val,type,cmt) values'
                ];
                var intervals=oldApplies.concat(times);
                if(hasOverlap(intervals)) {
                  return DB.sqlError(6010, `time overlapped`);
                }
                
                var t;
                for(var i in times) {
                    t = times[i];
                    dur=duration(t,days);
                    if(dur.code!=0) {
                        var dt=new Date(t.start*60000);
                        return DB.sqlError(dur.code,dur.info+','+dt.toLocaleString());
                    }
                    if(dur.tp=='O') {appType='OOW';ratio=@{!oowSalary};}
                    else if(dur.tp=='F') {appType='FOW';ratio=@{!fowSalary};}
                    else {appType='WOW';ratio=@{!wowSalary};}
                
                    if(i>0)sqls.push(',');

                    val=(ratio*@{!hSalary}*dur.t/60).toFixed(2);
                    sqls.push('(@{id},@{#tokenCaller},', dur.start, ',', dur.end,
                              ',', dur.t, ',', val, `,'`,appType, `','`, t.cmt, `')`);
                }
                return DB.sql(sqls.join(''));
                })()",

                "replace into applies(id,uid,gid,account,type)
                 values(@{id},@{#tokenCaller},@{!gid},'@{#tokenAcc}','OTW')"
            ]
        }
    ],
    "response":[]
},

{
    "name": "confirmOtw",
    "method":"POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment":"确认加班申请，将申请时间转为考勤记录，只有加班打卡后才可确认。一旦确认，不可更改",

    "request": [
        {"name":"id", "type":"int", "must":true, "min":0, "comment":"申请id"},
        {"name":"opinion", "type":"string", "must":true, "min":0, "comment":"意见"}
    ],
    
    "vars": [
        {"name":"YEAR", "val":"@{NOW|`yyyy`}", "comment":"用于分库"}
    ],

    "process" : [
        {
            "name" : "get_apply_info",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{YEAR}",
            "sqls" : [
                {
                    "name" : "get_base_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select gid,uid from applies
                     where id=@{id} and state='WAIT' and type='OTW'"
                },
                {
                    "name" : "times",
                    "metas" : "each",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select start,end,type,val,duration from atdtime where aid=@{id}"
                }
            ],
            "onSuccess":"{
                \"minStart\":@{MIN|i,!times,'start'},
                \"maxEnd\":@{MAX|i,!times,'end'}
            }"
        },
        //返回gid，与申请时所在部门可能不同。因为加班请假的成本算在项目，所以不处理这种可能的差异
        {"macro":"is_his_leader", "#UID#":"@{!uid}"},
        {
            //确认是否有刷卡记录，如果没有，不能计算加班
            "name":"get_clock_rec",
            "type":"rdb",
            "db":"attendance",
            "sharding" : "@{YEAR}",
            "sqls" : [{
                "name":"clocks",
                "metas":"each",
                "merge":false,
                "multi":true,
                "ignores":["NOT_EXISTS"],
                "sql":"select start,end from attendance
                    where uid=@{#tokenCaller} and type='WORK'
                      and start>@{!minStart}-1 and start<@{!maxEnd}+1
                    union
                    select start,end from attendance
                    where uid=@{#tokenCaller} and type='WORK'
                      and end>@{!minStart}-1 and end<@{!maxEnd}+1"
            }]
        },
        {
            "name" : "confirm",
            "type" : "rdb",
            "db": "attendance",
            "sharding" : "@{YEAR}",
            "comment":"确认加班，生成考勤记录",
            "sqls" : ["js:var t;
                var times=@{!times};
                var clocks=@[IFNULL|!clocks,`[]`,obj];
                var clocked=false;
                var sqls=['insert into attendance(gid,uid,type,start,end,interval,val) values'];
                for(var i in times) {
                    if(i>0)sqls.push(',');
                    t=times[i];
                    clocked=false;
                    for(var c of clocks) { //检查是否已刷卡
                        clocked=t.start>=c.start&&t.end<=c.end;
                        if(clocked)break;//在刷卡时间段内，只要有一个就行
                    }
                    if(!clocked) break;
                    sqls.push(`(@{!gid},@{!uid},'`, t.type, `',`, t.start, ',', t.end, ',',
                             t.duration, ',', t.val, ')');
                }
                if(!clocked) DB.sqlError(6013,'overtime work not in clock time');
                else DB.sql(sqls.join(''));
            "]
        },
        {
            "name" : "update_applies",
            "type" : "rdb",
            "db": "log",
            "sharding" : "@{YEAR}",
            "sqls" : [
                 "update applies set state='OK',opinion='@{opinion}' where id=@{id}"
            ]
        }
    ],
    "response":[]
},
{
    "name": "confirmLeave",
    "method":"POST",
    "property": "private",
    "tokenChecker": "USER",
    "comment":"确认请假申请，将申请时间转为考勤记录。如果有刷卡记录则不能请假。一旦确认，不可更改",

    "request": [
        {"name":"id", "type":"int", "must":true, "min":0, "comment":"申请id"},
        {"name":"opinion", "type":"string", "must":true, "min":0, "comment":"意见"}
    ],

    "vars": [
        {"name":"YEAR", "val":"@{NOW|`yyyy`}", "comment":"用于分库"}
    ],
    
    "process" : [
        {
            "name" : "get_apply_info",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{YEAR}",
            "sqls" : [
                {
                    "name" : "get_base_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select gid,uid from applies
                     where id=@{id} and state='WAIT' and type in('LEAV','BUSI')"
                },
                {
                    "name" : "get_weal", //计算福利假
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select ifnull(sum(duration),0) weal
                     from atdtime where aid=@{id} and type='WEAL'"
                },
                {
                    "name" : "get_holiday", //计算年休假
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select ifnull(sum(duration),0) holiday
                     from atdtime where aid=@{id} and type='HOLI'"
                },
                {
                    "name" : "times",
                    "metas" : "each",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select start,end,val,type,duration from atdtime where aid=@{id}"
                }
            ],
            "onSuccess":"{
                \"minStart\":@{MIN|i,!times,'start'},
                \"maxEnd\":@{MAX|i,!times,'end'}
            }"
        },
        //返回gid，与申请时所在部门可能不同。因为加班请假的成本算在项目，所以不处理这种可能的差异
        {"macro":"is_his_leader", "#UID#":"@{!uid}"},
        {
            "name": "check_employee_quota",
            "type": "dataexists",
            "db": "hr",
            "when": "@{CONDITION|!weal,'i.>',0}||@{CONDITION|!holiday,'i.>',0}",
            "comment": "检查雇员年休假、福利假配额是否足够",
            "expect": true,
            "errorCode": 6004,
            "errorInfo": "quota is not enough",
            "sql" : "select 1 from employee where uid=@{!uid}
                 and weal>=@{!weal} and holiday>=@{!holiday} and state='NORM'"
        },
        {
            //查询刷卡记录，如果有，则请假失败
            "name":"get_clock_rec",
            "type":"rdb",
            "db":"attendance",
            "when":"@{!minStart}<@{NOW|unit60000}", //事后请假，没有刷卡记录的情况下才可以
            "sharding" : "@{YEAR}",
            "sqls" : [{
                "name":"clocks",
                "metas":"each",
                "merge":false,
                "multi":true,
                "ignores":["NOT_EXISTS"],
                "sql":"select start,end from attendance
                    where uid=@{#tokenCaller} and type='WORK'
                      and start>@{!minStart}-1 and start<@{!maxEnd}+1
                  union
                    select start,end from attendance
                    where uid=@{#tokenCaller} and type='WORK'
                      and end>@{!minStart}-1 and end<@{!maxEnd}+1"
            }]
        },
        {
            "name" : "confirm",
            "type" : "rdb",
            "db": "attendance",
            "sharding" : "@{YEAR}",
            "comment":"确认请假&加班，生成考勤记录",
            "sqls" : ["js:var t;
                var times=@{!times};
                var clocks=@[IFNULL|!clocks,`[]`,obj];
                var clocked=false;
                var sqls=['replace into attendance(gid,uid,type,start,end,interval,val) values'];
                for(var i in times) {
                    if(i>0)sqls.push(',');
                    t=times[i];
                    clocked=false;
                    for(var c of clocks) {
                        clocked=t.start<c.end&&t.end>c.start;
                        if(clocked)break;//已刷卡，无需请假，只要有一个就冲突
                    }
                    if(clocked) break;
                    sqls.push(`(@{!gid},@{!uid},'`, t.type, `',`, t.start, ',', t.end, ',',
                             t.duration, ',', t.val, ')');
                }
                if(clocked) DB.sqlError(6012,'leave in clocked time');
                else DB.sql(sqls.join(''));
            "]
        },
        {
            "name" : "update_applies",
            "type" : "rdb",
            "db": "log",
            "sharding" : "@{YEAR}",
            "sqls" : [
                 "update applies set state='OK',opinion='@{opinion}' where id=@{id}"
            ]
        },
        {
            "name" : "update_quota",
            "type" : "rdb",
            "db" : "hr",
            "when" : "@{!weal}>0||@{!holiday}>0",
            "sqls" : [
                "update employee set
                    weal=weal-@{!weal},
                    holiday=holiday-@{!holiday}
                 where uid=@{!uid}"
            ]
        }
    ],
    "response":[]
},
{
    "name" : "reject",
    "method" : "PUT",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "拒绝申请",
    
    "request": [
        {"name":"id", "type":"int", "must":true, "comment":"申请id"},
        {"name":"opinion", "type":"string", "must":true, "min":0, "comment":"意见"}
    ],
    "vars": [
        {"name":"YEAR", "val":"@{NOW|`yyyy`}", "comment":"用于分库"}
    ],
    
    "process" : [
        {
            "name" : "get_apply_uid",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{YEAR}",
            "sqls" : [{
                "name" : "get_uid",
                "metas" : "each",
                "merge" : true,
                "multi" : false,
                "sql" : "select uid from applies where id=@{id} and state<>'OK'"
            }]
        },
        {"macro":"is_his_leader", "#UID#":"@{!uid}"},
        {
            "name" : "reject",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{YEAR}",
            "sqls" : [{
                "expected":{"num":1, "errorCode":6002, "errorInfo":"not exists"},
                "sql":"update applies set state='REJ',opinion='@{opinion}'
                 where id=@{id} and state<>'OK'"
            }]
        }
    ]
},

{
    "name" : "cancel",
    "method" : "DELETE",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "取消申请，只能申请人自己取消。
        如果尚未确认，则直接删除；如果已确认，则只取消尚未发生的请求",
    
    "request": [
        {"name":"id", "type":"int", "must":true, "comment":"申请id"}
    ],
    
    "vars": [
        {"name":"YEAR", "val":"@{NOW|`yyyy`}", "comment":"用于分库"}
    ],
    
    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{YEAR}",
            "sqls" : [
                {
                    "name" : "apply_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select state from applies
                         where id=@{id} and uid=@{#tokenCaller}"
                },
                {
                    "name" : "times", //尚未到期的申请时段
                    "metas" : "each",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select start,type from atdtime
                         where aid=@{id} and start>@{NOW|unit60000}"
                }
            ]
        },
        {
            "name" : "remove_all",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{YEAR}",
            "when":"'@{!state}'!='OK'",
            "sqls" : [
                {
                    "expected":{"num":1,"errorCode":"NO_RIGHT","errorInfo":"no right"},
                    "sql":"delete from applies where id=@{id} and state<>'OK'"
                },
                "delete from atdtime where aid=@{id}"
            ]
        },
        {
            "name" : "remove_part_app",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{YEAR}",
            "when":"'@{!state}'=='OK' && @{SIZE|!times}>0",
            "sqls" : [
               "delete from atdtime where aid=@{id} and start in(@{LIST|!times,``,`start`}))"
            ]
        },
        {
            "name" : "remove_part_atd",
            "type" : "rdb",
            "db" : "log",
            "sharding" : "@{YEAR}",
            "when":"'@{!state}'=='OK' && @{SIZE|!times}>0",
            "sqls" : ["join:@{FOR|!times,`;`,
                `delete from attendance where uid=@{#tokenCaller} and start=`,
                e.start, ` and type='`, e.type, `'`}
            "]
        }
    ],
    "response":[]
}
]