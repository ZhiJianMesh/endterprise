[
{
    "name" : "getApply",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "查看加班、请假与工作日在途申请详情",

    "request": [
        {"name":"id", "type":"int", "must":true, "comment":"申请id"}
    ],

    "process" : [
        {
            "name" : "get_apply_times",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                {
                    "name" : "apply_info",
                    "metas" : "each",
                    "multi" : false,
                    "merge" : true,
                    "sql" : "select uid,account,type,state from applies where id=@{id}"
                },
                {
                    "name" : "times",
                    "multi" : true,
                    "merge" : false,
                    "metas" : "each",
                    "sql" : "select type,start,end,cmt from atdtime where aid=@{id}"
                }
            ]
        },
        //查看自己的申请，无需确认，否则确认为部门经理
        {"macro":"is_his_leader", "#UID#":"@{!uid}",
         "when":"@{CONDITION|!uid,'i.!=',#tokenCaller}"}
    ]
},

{
    "name" : "clock",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "上班或下班打卡记录",
    
    "vars": [
        {"name":"cur", "val":"@{NOW|unit60000}", "toResp":true}
    ],
    
    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name" : "grp_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select M.gid from member M,grp G
                         where M.uid=@{#tokenCaller} and M.role='NOR'
                          and G.id=M.gid and G.type='D'"
                },
                {
                    "name" : "base_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select E.worktime,E.hSalary,E.dSalary,
                            Z.timeOff,W.first,W.second,W.third,W.forth,W.leadTime
                         from employee E,office O,zone Z,worktime W
                         where E.uid=@{#tokenCaller}
                          and O.id=E.office and Z.id=O.zone
                          and W.id=E.worktime"
                }
            ]
        },
        {
            "name" : "free_worktime",
            "type" : "static",
            "when" : "@{CONDITION|!worktime,'i.==',0}", //为0时，工作时间自由，无需刷卡
            "data" : "{\"start\":0,\"end\":0}"
        },
        {
            "name" : "get_fore_clock_time",
            "type" : "rdb",
            "db" : "attendance",
            "when" : "@{CONDITION|!worktime,'i.!=',0}", //为0时，工作时间自由，无需刷卡
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [{
                "name":"recent_clock_time",
                "metas" : "each",
                "merge" : true,
                "multi" : false,
                "isWrite" : false,
                "ignores" : ["NOT_EXISTS"],
                "sql" : "js:
                    //计算当天的刷卡最早开始时间
                    var start0=@{NOW|unit86400000}*1440-@{!timeOff}+@{!first}-@{!leadTime};
                    var start, end;
                    if(@{cur}>=start0) start=start0; //处在当前刷卡周期
                    else start=start0-1440;//处在上一个刷卡周期
                    end=start+1440;
                    start--;//避免大于等于判断
                    DB.sql(`select start from attendance
                         where uid=@{#tokenCaller} and start>`
                         + start + ' and start<' + end + ` and type='WORK'`);
                "
            }]
        },
        {
            "name" : "clock_in",
            "type" : "rdb",
            "db" : "attendance",
            "when" : "@{CONDITION|!worktime,'i.!=',0}
                     && @{CONDITION|!start,'s.==', ''}", 
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : ["
                insert into attendance(gid,uid,type,start)
                 values(@{!gid},@{#tokenCaller},'WORK',@{cur})
            "],
            "onSuccess" : "{start:@{cur},end:0}"
        },
        {
            "name" : "clock_out",
            "type" : "rdb",
            "db" : "attendance",
            //为0时，工作时间自由，无需刷卡
            //!start不为空，表示刷过一次，本次是下班卡
            "when" : "@{CONDITION|!worktime,'i.!=',0}
                     || @{CONDITION|!start,'s.!=', ''}", 
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : ["js:
                var WHOLEDAY=@{!forth}-@{!first}-(@{!third}-@{!second});
                var dayStart=@{NOW|unit86400000}*1440-@{!timeOff};
                var start1=dayStart+@{!first}; //规定的上班刷卡时间
                var start0=start1-@{!leadTime};//上班刷卡开始时间
                var end0=dayStart+@{!forth};//下班刷卡开始时间
                var end1=start0+1440;//下班刷卡结束时间
                var mid0=dayStart+@{!second};//中间下班时间
                var mid1=dayStart+@{!third};//中间上班时间
                var start=@{!start}; //实际刷卡时间
                var interval=0;
                var total=end0-start1-(mid1-mid0);
                var val;

                if(@{cur}<mid1) { //上半段刷的下班卡
                    interval=Math.min(@{cur},mid0)-Math.max(start,start1);
                } else { //下半段刷下班卡
                    interval=Math.min(@{cur},end0);
                    if(start<mid0) { //上午刷的上班卡
                        interval-=Math.max(start,start1);
                        interval-=(mid1-mid0);
                    } else { //下午刷的上班卡
                        interval-=Math.max(start,mid1);
                    }
                }
                val=interval>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*interval/60).toFixed(2);
                DB.sql('update attendance set end=@{cur},val='+val
                    +` where uid=@{#tokenCaller} and type='WORK' and start=` + start);
                "
            ],
            "onSuccess" : "{start:@{!start},end:@{cur}}"
        }
    ],
    "response":[
        {"name":"start", "type":"int", "must":true, "comment":"开始时间"},
        {"name":"end", "type":"int", "must":true, "comment":"结束时间"}
    ]
},
{
    "name" : "clockAt",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "查询当天的上班、下班打卡记录",
    
    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [{
                "name" : "base_info",
                "metas" : "each",
                "merge" : true,
                "multi" : false,
                "sql" : "select E.worktime,Z.timeOff,W.first,W.leadTime
                     from employee E,office O,zone Z,worktime W
                     where E.uid=@{#tokenCaller}
                      and O.id=E.office and Z.id=O.zone
                      and W.id=E.worktime"
            }]
        },
        {
            "name" : "free_worktime",
            "type" : "static",
            "when" : "@{CONDITION|!worktime,'i.==',0}", //为0时，工作时间自由，无刷卡时间
            "data" : "{\"start\":0,\"end\":0}"
        },
        {
            "name" : "get_clock_time",
            "type" : "rdb",
            "db" : "attendance",
            "when" : "@{CONDITION|!worktime,`i.!=`,0}", //为0时，工作时间自由，无需刷卡
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [{
                "name":"recent_clock_time",
                "metas" : "each",
                "merge" : true,
                "multi" : false,
                "isWrite" : false,
                "ignores" : ["NOT_EXISTS"],
                "sql" : "js:
                    //计算当天的刷卡最早开始时间
                    var start0=@{NOW|unit86400000}*1440-@{!timeOff}+@{!first}-@{!leadTime};
                    var start, end;
                    if(@{NOW|unit60000}>=start0) start=start0; //处在当前刷卡周期
                    else start=start0-1440;//处在上一个刷卡周期
                    end=start+1440;
                    start--;//避免大于等于判断
                    DB.sql(`select start,end from attendance
                         where uid=@{#tokenCaller} and start>`
                         + start + ' and start<' + end + ` and type='WORK'`);
                "
            }],
            "onSuccess":"{
                \"start\":@{CONDITION|!start, 'i.!=', 0, !start, 0},
                \"end\":@{CONDITION|!end, 'i.!=', 0, !end, 0}
            }"
        }
    ]
},
{
    "name" : "leave",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "请假申请。
        WEAL福利假，比如三八节、体检是福利假，不扣工资，这些假不是统一的，按小时请；
        HOLI年休假，必须按天请，不扣工资；
        AFFA事假，按分钟请，扣全额工资；
        SICK病假，扣部分工资，每个员工根据工作年限，扣工资额度不同",

    "request": [
        {"name":"id", "type":"int", "must":false, "comment":"申请id，不为空时，表示已生成applies记录"},
        {"name":"times", "type":"object", "must":true, "list":true, "minSize":1, "props":[
            {"name":"type", "type":"string", "must":true, "comment":"类型",
             "options":["HOLI","WEAL","AFFA","SICK"]},
            {"name":"start", "type":"int", "must":true, "comment":"请假开始时间，UTC分钟"},
            {"name":"end", "type":"int", "must":true, "biggerThan":"start", "comment":"请假结束时间，UTC分钟"},
            {"name":"cmt", "type":"string", "must":true, "comment":"描述"}
        ], "comment":"请假时间段，可以多个"}
    ],
    
    "vars":[
        {"name":"minStart", "val":"@{MIN|i,times,'start'}"},
        {"name":"maxEnd", "val":"@{MAX|i,times,'end'}"}
    ],

    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name":"employee_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select e.weal,e.holiday,z.timeOff,
                            e.sickRatio,e.dSalary,e.hSalary,
                            w.first,w.second,w.third,w.forth,w.calendar
                         from employee e,office o,zone z,worktime w
                         where e.uid=@{#tokenCaller} and o.id=e.office
                          and z.id=o.zone and w.id=e.worktime"
                },
                {
                    "name":"get_department_id",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select m.gid from member m,grp g
                        where m.uid=@{#tokenCaller} and m.role<>'ADM'
                        and g.id=m.gid and g.type='D'"
                },
                {
                    "name" : "days",
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select day,type from caldays where calendar=@[!calendar]
                        and day>@[UTC|@{minStart},!timeOff,'yyyyMMdd',60000]-1
                        and day<@[UTC|@{maxEnd},!timeOff,'yyyyMMdd',60000]+1"
                }
            ]
        },
        {
            "name" : "get_apply_id",
            "type" : "var",
            "when" : "@{CONDITION|id,'s.==',''}",
            "vars":{
                "id":"@{SEQUENCE|'applyid'}"
            }
        },
        {
            "name":"save_apply",
            "type":"rdb",
            "db":"log",
            "sharding" : "@{NOW|`yyyy`}",
            "sqls" : [
                {
                    "name":"oldApplies",
                    "metas":"each",
                    "merge":false,
                    "multi":true,
                    "toResp":false,
                    "ignores":["NOT_EXISTS"],
                    "sql":"select start,end from atdtime
                        where uid=@{#tokenCaller} and start>@{minStart}-1
                         and start<@{maxEnd}+1 and aid<>@{id}
                        union
                        select start,end from atdtime
                        where uid=@{#tokenCaller} and end>@{minStart}-1
                         and end<@{maxEnd}+1 and aid<>@{id}"
                },

                "replace into applies(id,uid,gid,account,type)
                 values(@{id},@{#tokenCaller},@{!gid},'@{#tokenAcc}','LEAV')",
                
                "js:
                function hasOverlap(intervals) {
                    intervals.sort((a,b) => a.start-b.start);
                    for(let i=0; i<intervals.length-1; i++) {
                        if(intervals[i].end>intervals[i+1].start) {
                            return true;
                        }
                    }
                    return false;
                }
                function duration(req, days) {
                    var start=req.start;
                    var end=req.end;
                    if(end-start>1440||end-start<60) { //连续时间段必须在24小时之内，且必须大于1小时
                        return {code:6001,info:'invalid start,end'};
                    }
                    
                    var dt=new Date();
                    dt.setTime((start+dt.getTimezoneOffset()+@{!timeOff})*60000);
                    var cd=dt.getFullYear()*10000+(dt.getMonth()+1)*100+dt.getDate();
                    if(days[cd]!='W') {//非工作日，不必请假
                        return {code:6007,info:`needn't apply leave on free days`};
                    }
                    var dayStart=1440*Math.round(start/1440)-@{!timeOff};
                    var first=dayStart+@{!first};
                    var mid0=dayStart+@{!second};
                    var mid1=dayStart+@{!third};
                    var forth=dayStart+@{!forth};
                    var t;
                    if(start<mid0) { //上半段开始
                        start=Math.max(first,start);
                        if(end<=mid1) { //上半段结束
                            end=Math.min(end,mid0);
                            t=end-start;
                        } else {//下半段结束
                            end=Math.min(forth,end);
                            t=mid0-start + end-mid1;
                        }
                    } else {//下半段开始
                        start=Math.max(mid1,start);
                        end=Math.min(end,forth);
                        t=end-start;
                    }
                    if(t<=0) {//非工作时段，不必请假
                        return {code:6007,info:`needn't apply leave at free time`};
                    }
                    return {code:0,t:t,start:start,end:end};
                }

                (function(){
                var WHOLEDAY=@{!forth}-@{!first}-(@{!third}-@{!second});
                var days=@{IFNULL|!days,`{}`,obj};
                var times=@{times};
                var oldApplies=@[IFNULL|!oldApplies,`[]`,obj];
                var val;
                var totalWeal=0, totalHoli=0, dur;
                var sqls=[
                    'delete from atdtime where aid=@{id};', //更新的情况，数据已存在
                    'insert into atdtime(aid,uid,start,end,duration,val,type,cmt) values'
                ];
                
                var intervals=oldApplies.concat(times);
                if(hasOverlap(intervals)) {
                  return DB.sqlError(6010, `time overlapped`);
                }

                var t;
                for(var i in times) {
                    t = times[i];
                    dur=duration(t,days);
                    if(dur.code!=0) {
                        var dt=new Date(t.start*60000);
                        return DB.sqlError(dur.code,dur.info+','+dt.toLocaleString());
                    }
                    val=0; //扣薪
                    if(t.type=='HOLI') {//年休假，必须按天请，不扣薪
                        if(dur.t<WHOLEDAY) {
                            return DB.sqlError(6003,`holiday can't be split`);
                        }
                        totalHoli++;
                        if(totalHoli>@{!holiday}) {//年休假余额不足
                            return DB.sqlError(6004,'holiday not enough');
                        }
                        dur.t=1;
                        val=@{!dSalary};
                    } else if(t.type=='WEAL') {//福利假，按小时请，不扣薪
                        if((dur.t%60)!=0) {
                            return DB.sqlError(6005,`weal can't be split`);
                        }
                        dur.t=Math.round(dur.t/60);
                        totalWeal+=dur.t;
                        if(totalWeal>@{!weal}) {
                            return DB.sqlError(6006,'weal not enough');
                        }
                        val=dur.t>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*dur.t/60).toFixed(2);
                    } else if(t.type=='SICK') { //病假，部分扣减
                        val=dur.t>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*dur.t/60);
                        val=-(val*(1-@{!sickRatio})).toFixed(2);
                    } else if(t.type=='AFFA') {//事假，全部扣减
                        val=-(dur.t>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*dur.t/60).toFixed(2));
                    }
                    if(i>0)sqls.push(',');
                    sqls.push('(@{id},@{#tokenCaller},', dur.start, ',', dur.end,
                              ',', dur.t, ',', val, `,'`, t.type, `','`, t.cmt, `')`);
                }
                return DB.sql(sqls.join(''));
                })()" 
            ]
        }
    ],
    "response":[]
},
{
    "name" : "onBusiness",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "在途申请。如果能远程打卡或异地打卡，则无需申请",

    "request": [
        {"name":"id", "type":"int", "must":false, "comment":"申请id，不为空时，表示已生成applies记录"},
        {"name":"times", "type":"object", "must":true, "list":true, "minSize":1, "props":[
            {"name":"type", "type":"string", "must":true, "comment":"类型", "options":["BUSI"]},
            {"name":"start", "type":"int", "must":true, "comment":"请假开始时间，UTC分钟"},
            {"name":"end", "type":"int", "must":true, "biggerThan":"start", "comment":"请假结束时间，UTC分钟"},
            {"name":"cmt", "type":"string", "must":true, "comment":"描述"}
        ], "comment":"在途时间段，可以多个"}
    ],
    
    "vars":[
        {"name":"minStart", "val":"@{MIN|i,times,'start'}"},
        {"name":"maxEnd", "val":"@{MAX|i,times,'end'}"}
    ],

    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name":"employee_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select z.timeOff,e.dSalary,e.hSalary,
                            w.first,w.second,w.third,w.forth,w.calendar
                         from employee e,office o,zone z,worktime w
                         where e.uid=@{#tokenCaller} and o.id=e.office
                          and z.id=o.zone and w.id=e.worktime"
                },
                {
                    "name":"get_gid",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select m.gid from member m,grp g
                        where m.uid=@{#tokenCaller} and m.role<>'ADM'
                        and g.id=m.gid and g.type='D'"
                },
                {
                    "name" : "days",
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select day,type from caldays where calendar=@[!calendar]
                        and day>@[UTC|@{minStart},!timeOff,'yyyyMMdd',60000]-1
                        and day<@[UTC|@{maxEnd},!timeOff,'yyyyMMdd',60000]+1"
                }
            ]
        },
        {
            "name" : "get_apply_id",
            "type" : "var",
            "when" : "@{CONDITION|id,'s.==',''}",
            "vars":{
                "id":"@{SEQUENCE|'applyid'}"
            }
        },
        {
            "name" : "get_old_applies",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "name":"oldApplies",
                    "metas" : "each",
                    "merge":false,
                    "multi":true,
                    "toResp":false,
                    "ignores" : ["NOT_EXISTS"],
                    "sql":"select start,end from atdtime
                        where uid=@{#tokenCaller} and start>@{minStart}-1
                         and start<@{maxEnd}+1 and aid<>@{id}
                        union
                         select start,end from atdtime
                        where uid=@{#tokenCaller} and end>@{minStart}-1
                         and end<@{maxEnd}+1 and aid<>@{id}"
                },
                
                "replace into applies(id,uid,gid,account,type)
                 values(@{id},@{#tokenCaller},@{!gid},'@{#tokenAcc}','BUSI')",

                "js:
                function hasOverlap(intervals) {
                    intervals.sort((a,b) => a.start-b.start);
                    for(let i=0; i<intervals.length-1; i++) {
                        if(intervals[i].end>intervals[i+1].start) {
                            return true;
                        }
                    }
                    return false;
                }
                function duration(req, days) {
                    var start=req.start;
                    var end=req.end;
                    if(end-start>1440||end-start<60) {//连续时间段必须在24小时之内，且大于1小时
                        return {code:6001,info:'invalid start,end'};
                    }
                    
                    var dt=new Date();
                    dt.setTime((start+dt.getTimezoneOffset()+@{!timeOff})*60000);
                    var cd=dt.getFullYear()*10000+(dt.getMonth()+1)*100+dt.getDate();
                    if(days[cd]!='W') {//非工作日，不必填在途，根据公司制度填加班单
                        return {code:6009,info:`needn't apply busi on free days`}
                    };
                    var dayStart=1440*Math.round(start/1440)-@{!timeOff};
                    var first=dayStart+@{!first};
                    var mid0=dayStart+@{!second};
                    var mid1=dayStart+@{!third};
                    var forth=dayStart+@{!forth};
                    var t=0;
                    
                    if(start<mid0) { //上半段开始
                        start=Math.max(first,start);
                        if(end<=mid1) { //上半段结束
                            end=Math.min(end,mid0);
                            t=end-start;
                        } else {//下半段结束
                            end=Math.min(forth,end);
                            t=mid0-start+end-mid1;
                        }
                    } else { //下半段开始
                        start=Math.max(mid1,start);
                        end=Math.min(end,forth)
                        t=end-start;
                    }
                    if(t<=0) {//非工作时段，不必请假
                        return {code:6007,info:`needn't apply busi at free time`};
                    }
                    return {code:0,t:t,start:start,end:end};
                }
                
                (function(){
                var WHOLEDAY=@{!forth}-@{!first}-(@{!third}-@{!second});
                var days=@{IFNULL|!days,`{}`,obj};
                var times=@{times};
                var oldApplies=@[IFNULL|!oldApplies,`[]`,obj];
                var val;
                var totalWeal=0, totalHoli=0, dur;
                var sqls=[
                    'delete from atdtime where aid=@{id};', //更新的情况，数据已存在
                    'insert into atdtime(aid,uid,start,end,duration,val,type,cmt) values'
                ];
                
                var intervals=oldApplies.concat(times);
                if(hasOverlap(intervals)) {
                  return DB.sqlError(6010, `time overlapped`);
                }

                var t;
                for(var i in times) {
                    t = times[i];
                    dur=duration(t,days);
                    if(dur.code!=0) {
                        var dt=new Date(t.start*60000);
                        return DB.sqlError(dur.code,dur.info+','+dt.toLocaleString());
                    }
                    if(i>0)sqls.push(',');
                    val=dur.t>=WHOLEDAY?@{!dSalary}:(@{!hSalary}*dur.t/60).toFixed(2);
                    sqls.push('(@{id},@{#tokenCaller},', dur.start, ',', dur.end,
                              ',', dur.t, `,`, val, `,'`, t.type, `','`, t.cmt, `')`);
                }
                return DB.sql(sqls.join(''));
                })()" 
            ]
        }
    ],
    "response":[]
},

{
    "name" : "overtimework",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "加班、延长工时申请。
        WOW工作日延长工作时间，必须是工作时段之外；
        OOW休息日加班，比如周六、周日加班；
        FOW节假日加班，比如国庆、春节加班",
    
    "request": [
        {"name":"id", "type":"int", "must":false, "comment":"申请id"},
        {"name":"times", "type":"object", "must":true, "list":true, "minSize":1, "props":[
            {"name":"type", "type":"string", "must":true, "comment":"类型", "options":["OTW","WOW","OOW","FOW"]},
            {"name":"start", "type":"int", "must":true, "comment":"加班开始时间，UTC分钟"},
            {"name":"end", "type":"int", "must":true, "biggerThan":"start", "comment":"加班结束时间，UTC分钟"},
            {"name":"cmt", "type":"string", "must":true, "comment":"描述"}
        ], "comment":"请假时间段，可以多个"}
    ],

    "vars":[
        {"name":"minStart", "val":"@{MIN|i,times,'start'}"},
        {"name":"maxEnd", "val":"@{MAX|i,times,'end'}"}
    ],
    
    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name":"employee_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select z.timeOff,z.fowSalary,z.oowSalary,z.wowSalary,
                            e.worktime,e.hSalary,
                            w.first,w.second,w.third,w.forth,w.leadTime,w.calendar
                         from employee e,office o,zone z,worktime w
                         where e.uid=@{#tokenCaller} and o.id=e.office
                          and z.id=o.zone and w.id=e.worktime"
                },
                {
                    "name":"get_gid",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select m.gid from member m,grp g
                        where m.uid=@{#tokenCaller} and m.role<>'ADM'
                        and g.id=m.gid and g.type='D'"
                },
                {
                    "name" : "days",
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select day,type from caldays where calendar=@[!calendar]
                        and day>@[UTC|@{minStart},!timeOff,'yyyyMMdd',60000]-1
                        and day<@[UTC|@{maxEnd},!timeOff,'yyyyMMdd',60000]+1"
                }
            ]
        },
        {
            "name":"get_apply_id",
            "type" : "var",
            "when" : "@{CONDITION|id,'s.==',''}",
            "vars":{
                "id":"@{SEQUENCE|'applyid'}"
            }
        },
        {
            "name" : "save_apply",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "name":"oldApplies",
                    "metas":"each",
                    "merge":false,
                    "multi":true,
                    "toResp":false,
                    "ignores":["NOT_EXISTS"],
                    "sql":"select start,end from atdtime
                        where uid=@{#tokenCaller} and start>@{minStart}-1
                         and start<@{maxEnd}+1 and aid<>@{id}
                        union
                         select start,end from atdtime
                        where uid=@{#tokenCaller} and end>@{minStart}-1
                         and end<@{maxEnd}+1 and aid<>@{id}"
                },

                "replace into applies(id,uid,gid,account,type)
                 values(@{id},@{#tokenCaller},@{!gid},'@{#tokenAcc}','OTW')",

                "js:
                function hasOverlap(intervals) {
                    intervals.sort((a,b) => a.start-b.start);
                    for(let i=0; i<intervals.length-1; i++) {
                        if(intervals[i].end>intervals[i+1].start) {
                            return true;
                        }
                    }
                    return false;
                }
                function duration(req, days) {
                    var start=req.start;
                    var end=req.end;
                    //连续时间段必须在24小时之内，多天的，提交多条
                    if(end-start>1440||end-start<60) {
                      return {code:6001,info:'invalid start or end'};
                    }

                    var dt=new Date();
                    dt.setTime((start+dt.getTimezoneOffset()+@{!timeOff})*60000)
                    var cd=dt.getFullYear()*10000+(dt.getMonth()+1)*100+dt.getDate();
                    var dType=days[cd];

                    var dayStart=1440*Math.round(start/1440)-@{!timeOff};
                    var first=dayStart+@{!first};
                    var mid0=dayStart+@{!second};
                    var mid1=dayStart+@{!third};
                    var forth=dayStart+@{!forth};
                    if(dType!='W') {//休息日或节假日加班，按平时作息判断加班时长
                        var t;
                        if(start<mid0) { //上半段开始
                          start=Math.max(first,start);
                          if(end<=mid1) { //上半段结束
                            end=Math.min(end,mid0);
                            t=end-start;
                          } else { //下半段结束
                            end=Math.min(forth,end);
                            t=mid0-start+end-mid1;
                          }
                        } else {//下半段开始
                          start=Math.max(mid1,start);
                          end=Math.min(end,forth);
                          t=Math.min(end,forth)-Math.max(mid1,start); 
                        }
                        return {code:0,t:t,tp:dType,start:start,end:end};
                    }
                    //工作日延长工时，只算下班到第二天上班打卡之前
                    if(start>=forth && end<first+1440-@{!leadTime}) {
                        return {code:0,t:end-start,start:start,end:end,tp:dType};
                    }
                    return {code:6008,info:`can't overtime work at worktime`};//上班时段，不得加班
                }
                
                (function(){
                var days=@{IFNULL|!days,`{}`,obj};
                var times=@{times};
                var oldApplies=@[IFNULL|!oldApplies,`[]`,obj];
                var val;
                var dur;
                var appType;
                var ratio;
                var sqls=[
                    'delete from atdtime where aid=@{id};',
                    'insert into atdtime(aid,uid,start,end,duration,val,type,cmt) values'
                ];
                var intervals=oldApplies.concat(times);
                if(hasOverlap(intervals)) {
                  return DB.sqlError(6010, `time overlapped`);
                }
                
                var t;
                for(var i in times) {
                    t = times[i];
                    dur=duration(t,days);
                    if(dur.code!=0) {
                        var dt=new Date(t.start*60000);
                        return DB.sqlError(dur.code,dur.info+','+dt.toLocaleString());
                    }
                    if(dur.tp=='O') {appType='OOW';ratio=@{!oowSalary};}
                    else if(dur.tp=='F') {appType='FOW';ratio=@{!fowSalary};}
                    else {appType='WOW';ratio=@{!wowSalary};}
                
                    if(i>0)sqls.push(',');

                    val=(ratio*@{!hSalary}*dur.t/60).toFixed(2);
                    sqls.push('(@{id},@{#tokenCaller},', dur.start, ',', dur.end,
                              ',', dur.t, ',', val, `,'`,appType, `','`, t.cmt, `')`);
                }
                return DB.sql(sqls.join(''));
                })()" 
            ]
        }
    ],
    "response":[]
},

{
    "name": "confirm",
    "method":"POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment":"确认加班或请假申请，将申请时间转为考勤记录。一旦确认，不可更改",

    "request": [
        {"name":"id", "type":"int", "must":true, "min":0, "comment":"申请id"},
        {"name":"opinion", "type":"string", "must":true, "min":0, "comment":"意见"}
    ],

    "process" : [
        {
            "name" : "get_apply_info",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                {
                    "name" : "get_base_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select uid,type from applies where id=@{id} and state='WAIT'"
                },
                {
                    "name" : "get_weal", //计算福利假
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select sum(duration) weal from atdtime where aid=@{id} and type='WEAL'"
                },
                {
                    "name" : "get_holiday", //计算年休假
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select sum(duration) holiday from atdtime where aid=@{id} and type='HOLI'"
                },
                {
                    "name" : "times",
                    "metas" : "each",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select start,end,val from atdtime where aid=@{id}"
                }
            ]
        },
        //返回gid，与申请时所在部门可能不同。因为加班请假的成本算在项目，所以不处理这种可能的差异
        {"macro":"is_his_leader", "#UID#":"@{!uid}"},
        {
            "name" : "check_employee_quota",
            "type" : "dataexists",
            "db" : "hr",
            "when" : "@{CONDITION|!weal,'i.>',0}||@{CONDITION|!holiday,'i.>',0}",
            "comment" : "检查雇员年休假、福利假配额是否足够",
            "expect" : true,
            "errorCode" : 6004,
            "errorInfo" : "quota is not enough",
            "sql" : "select * from employee where uid=@{!uid}
                 and weal>=@{!weal} and holiday>=@{!holiday} and state='NORM'"
        },
        {
            "name" : "confirm",
            "type" : "rdb",
            "db": "attendance",
            "sharding" : "@{NOW|`yyyy`}",
            "comment":"确认请假&加班，生成考勤记录",
            "sqls" : [
                "replace into attendance(gid,uid,type,start,end,val) values
                  @{FOR|!times,`,`, `(@{!gid},@{!uid},'@{!type}',`, e.start, `,`, e.end, `,`, e.val, `)`}"
            ]
        },
        {
            "name" : "update_applies",
            "type" : "rdb",
            "db": "log",
            "sqls" : [
                 "update applies set state='OK',opinion='@{opinion}' where id=@{id}"
            ]
        },
        {
            "name" : "update_quota",
            "type" : "rdb",
            "db" : "hr",
            "when" : "@{!weal}>0||@{!holiday}>0",
            "sqls" : [
                "update employee set
                    weal=weal-@{!weal},
                    holiday=holiday-@{!holiday}
                 where uid=@{!uid}"
            ]
        }
    ],
    "response":[]
},

{
    "name" : "reject",
    "method" : "PUT",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "拒绝申请",
    
    "request": [
        {"name":"id", "type":"int", "must":true, "comment":"申请id"},
        {"name":"opinion", "type":"string", "must":true, "min":0, "comment":"意见"}
    ],
    
    "process" : [
        {
            "name" : "get_apply_uid",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [{
                "name" : "get_uid",
                "metas" : "each",
                "merge" : true,
                "multi" : false,
                "sql" : "select uid from applies where id=@{id} and state<>'OK'"
            }]
        },
        {"macro":"is_his_leader", "#UID#":"@{!uid}"},
        {
            "name" : "reject",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [{
                "expected":{"num":1, "errorCode":6002, "errorInfo":"not exists"},
                "sql":"update applies set state='REJ',opinion='@{opinion}'
                 where id=@{id} and state<>'OK'"
            }]
        }
    ]
},

{
    "name" : "cancel",
    "method" : "DELETE",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "取消申请，只能申请人自己取消",
    
    "request": [
        {"name":"id", "type":"int", "must":true, "comment":"申请id"}
    ],
    
    "process" : [
        {
            "name" : "cancel",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                {
                    "expected":{"num":1,"errorCode":"NO_RIGHT","errorInfo":"no right"},
                    "sql":"delete from applies
                         where id=@{id} and uid=@{#tokenCaller} and state<>'OK'"
                },
                "delete from atdtime where aid=@{id}"
            ]
        }
    ],
    "response":[]
},
{
    "name" : "myAttendances",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "我的考勤记录",
    
    "request": [
        {"name":"offset", "type":"int",  "must":true, "min":0, "comment":"偏移"},
        {"name":"num", "type":"int",  "must":true, "min":1, "comment":"查询最大数量"}
    ],
    
    "process" : [
        {
            "name" : "get_attendances",
            "type" : "rdb",
            "db":"attendance",
            "sqls" : [
                {
                    "name":"get_total",
                    "multi":false,
                    "merge":true,
                    "metas":"each",
                    "sql":"select count(*) total from attendance where uid=@{#tokenCaller}"
                },
                {
                    "name":"list",
                    "multi":true,
                    "merge":false,
                    "metas":"each",
                    "sql":"select type,val,start,end
                      from attendance where uid=@{#tokenCaller}
                      order by start desc
                      LIMIT @{num} OFFSET @{offset}"
                }
            ]
        }
    ]
}
]