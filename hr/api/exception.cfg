[
{
    "name" : "my",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "我的考勤异常",

    "process" : [
        {
            "name" : "get_exceptions",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "name" : "list",
                    "multi" : true,
                    "merge" : false,
                    "metas" : "each",
                    "sql" : "select day,state,start,end,descr from exception
                            where uid=@{#tokenCaller} and state<>'OVER'
                            order by day asc"
                }
            ]
        }
    ]
},
{
    "name" : "waitforme",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "待我确认的考勤异常",

    "process" : [
        {
            "name" : "get_exceptions",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "name" : "list",
                    "multi" : true,
                    "merge" : false,
                    "metas" : "each",
                    "sql" : "select E.uid,E.account,E.day,E.state,E.start,E.end,E.descr
                            from grp G,member M,exception E
                            where G.admin=@{#tokenCaller} and G.type='D'
                              and M.gid=g.id and E.uid=M.uid and E.state='WAIT'
                            order by E.day asc"
                }
            ]
        }
    ]
},

{
    "name" : "commit",
    "method" : "PUT",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "提交部门主管确认",
    
    "request": [
        {"name":"day", "type":"int", "must":true, "comment":"日期，UTC天"},
        {"name":"start", "type":"int", "must":true, "comment":"实际开始时间，UTC分钟"},
        {"name":"end", "type":"int", "must":true, "comment":"实际结束时间，UTC分钟"}
    ],
    "vars":[
        {"name":"dayMinutes", "var":"@{MUL|i,day,1440}"}
    ],
    
    "process" : [
        {
            "name" : "get_timeoff",
            "type" : "rdb",
            "db":"hr",
            "sqls" : [
                {
                    "name" : "offset",
                    "multi" : false,
                    "merge" : true,
                    "metas" : "each",
                    "sql" : "select Z.timeOff,W.maxEdit
                             from employee E,office O,zone Z,worktime W
                            where E.uid=@{#tokenCaller}
                              and O.id=E.office and Z.id=O.zone
                              and W.id=E.worktime"
                }
            ]
        },   
        {
            "name" : "get_times",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "name" : "count",
                    "multi" : false,
                    "merge" : true,
                    "metas" : "each",
                    "sql" : "select count(*) exCount from exception
                            where uid=@{#tokenCaller}
                             and day>@{UTC|dayMinutes,!timeOff,'monthstart',60000}/1440
                             and day<@{UTC|dayMinutes,!timeOff,'monthend',60000}/1440"
                }
            ]
        },
        {
            "name" : "commit",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                "js:
                if(@{!exCount}>@{!maxEdit}) {
                    DB.sqlError(111, 'exceeds @{!maxEdit} times');
                } else {
                    DB.sql(`update exception set
                      account='@{#tokenAcc}',state='WAIT',
                      start=@{start},end=@{end}
                     where uid=@{#tokenCaller} and day=@{day}
                       and state='INIT'`)
                }"
            ]
        }
    ],
    
    "response":[]
},

{
    "name" : "confirm",
    "method" : "PUT",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "确认员工工时修改",
    
    "request": [
        {"name":"uid", "type":"int", "must":true, "comment":"员工帐号ID"},
        {"name":"day", "type":"int", "must":true, "comment":"日期，UTC天"}
    ],

    "vars":[
        {"name":"dayMinutes", "var":"@{MUL|i,day,1440}"}
    ],
    
    "process" : [
        {
            "name" : "check_rights",
            "type" : "rdb",
            "db" : "log",
            "convert" : {"code":2001,"to":111,"info":"no rights"},
            "comment" : "先确认执行人是否为部门主管",
            "sqls" : [
                {
                    "name" : "base_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select G.name from member M,grp G
                         where M.uid=@{uid} and G.id=M.gid and G.type='D'
                          and G.admin=@{#tokenCaller}"
                },
                {
                    "name" : "req_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select start,end from exception where uid=@{uid} and day=@{day}"
                },
                {
                    "name":"employee_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select e.worktime,e.dSalary
                            c.timeOff,w.first,w.forth,w.leadTime
                         from employee e,office o,zone z,worktime w,calendar c
                         where e.uid=@{#tokenCaller}
                          and o.id=e.office and z.id=o.zone
                          and w.id=e.worktime and c.id=w.calendar"
                }
            ]
        },
        {
            "name" : "commit",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                "delete from attendance where uid=@{uid}
                     and start>@{dayMinutes}-1 and start<@{dayMinutes}+1440",

                "js:var dayStart=@{NOW|unit86400000}*1440;
                var start1=dayStart+@{!first}-@{!timeOff}; //上班刷卡结束时间
                var start0=start1-@{!leadTime};//上班刷卡开始时间
                var end0=dayStart+1+@{!forth}-@{!timeOff};//下班刷卡开始时间
                var end1=start0+1440;//下班刷卡结束时间
                var mid0=dayStart+@{!second}-@{!timeOff};//中间下班时间
                var mid1=dayStart+@{!third}-@{!timeOff};//中间上班时间
                var val=0;
                var start=@{!start};
                var end=@{!end};
                
                if(start>start0&&start<=start1 && end>end0 && end<end1) {
                   val=@{!dSalary}; //正常上、下班
                } else {
                    var interval=0;
                    var total=@{!forth}-@{!first}-(@{!third}-@{!second});
                    if(start>start1&&start<mid0){//上午迟到
                        if(end>mid1) {//下午下班，可能早退
                            interval=mid0-start+Math.min(end,end0)-mid1;
                        } else { //上午下班
                            interval=mid0-start;
                        }
                    } else { //下午上班，且可能迟到可能早退
                        interval=Math.min(end,end0)-Math.max(start,mid1);
                    }
                    val=(interval/total).toFixed(2);
                }
                DB.sql(`replace into attendance(uid,type,start,end,val)
                     values(@{uid},'WORK',`, start, ',', end, ',', val, ')');
                ",

                "update exception set state='OVER'
                 where uid=@{uid} and day=@{day} and state='WAIT'"
            ]
        }
    ],
    
    "response":[]
},

{
    "name" : "check",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "APP-schedule",
    "comment" : "检查考勤异常，由schedule服务每天定时调用。
        逻辑类似headProcess;do{ process }while(...);tailProcess",
    "while":"
        if(@{#code}==RetCode.OK) {
            var offset=@{offset}+@{num};
            if(offset-@{!employee_num}>=@{num}) {//差值大于num，表示没有了
                Mesh.error(RetCode.OVER, 'over');
            } else {
                Mesh.success({offset:offset}); //覆盖offset
            }
        } else {
            Mesh.error(@{#code}, 'over');
        }
    ",

    "request": [
        {"name":"taskId", "type":"long", "must":true, "min":0, "comment":"任务ID"},
        {"name":"tag", "type":"string", "must":true, "min":10, "comment":"一次执行的标识"},
        {"name":"offset", "type":"int", "must":false, "default":0, "min":0, "comment":"批量偏移"},
        {"name":"num", "type":"int", "must":false, "default":100, "comment":"批量，一次不宜过多，100以内"}
    ],

    "vars":[
        {"name":"day", "var":"@{NOW|unit86400000}"},
        {"name":"dayStart", "var":"@{MUL|i,day,1440}"},
        {"name":"dayEnd", "var":"@{ADD|i,dayStart,1440}"}
    ],

    "headProcess" : [
        {
            "name" : "get_num",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name" : "employee_num",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select count(*) employee_num from employee"
                }
            ]
        }
    ],
    
    "process" : [
        {
            "name" : "get_employees",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name" : "employees",
                    "metas" : "each",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select W.first,W.second,W.third,W.forth,
                        W.leadTime,D.timeOff,E.uid
                     from employee E,worktime W,calendar C,caldays D
                      where E.state='NORM' and W.id=E.worktime and C.id=W.calendar
                        and D.calendar=W.calendar and D.day=@{day} and D.type='W'
                       ORDER BY E.uid asc
                       LIMIT @{num} OFFSET @{offset}"
                }
            ]
        },
        {
            "name" : "get_attendance",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                {
                    "name" : "attendances",
                    "metas" : "each",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select uid,start,end,type
                      from attendance
                      where uid in(@{LIST|!employees,``,6})
                       and type in('WORK','AFFA','BUSI','SICK')
                       and start>@{dayStart} and start<@{dayEnd}
                       order by uid,start asc"
                }
            ]
        },
        {
            "name" : "check_attendance",
            "type" : "rdb",
            "db" : "log",
            "sqls" : ["
                js:var eMap={};
                var employees=@{employees};
                for(var e of employees) {
                    eMap[e.uid]=e;
                }
                var aList=@{attendances}; //考勤
                var sqls=['replace into exception(uid,day,start,end)'];
                var epl; //单个雇员
                var foreAd; //前一个考勤
                var start0, start1, end0, end1, mid0, mid1, offset;
                var i=0, j=0, num=aList.length;
                var start, end, iEnd, iStart;//开始结束与中间开始结束
                var excNum=0;
                var continuous=true;
                
                while(i<num) {
                    foreAd=aList[i];
                    epl=eMap[foreAd.uid];
                    offset=epl.timeOff;
                    start1=@{dayStart}+1+epl.first-offset;
                    start0=start1-epl.leadTime;//leadTime
                    end0=@{dayStart}+1+epl.forth-offset;//forth
                    end1=start0+1440;
                    mid0=@{dayStart}+1+epl.second-offset;//second
                    mid1=@{dayStart}+1+epl.third-offset;//third

                    start=foreAd.start;
                    end=foreAd.end;
                    //全天的肯定在排在最前面，因为start肯定最小
                    epl.ok = start>=start0 && start<=start1 && end>=end0 && end<=end1;
                    
                    j=i+1;
                    continuous = true;
                    while(j<num&&aList[j].uid==foreAd.uid) {//同一帐号的多次记录，比如请假
                        if(aList[j].start<start) {
                            start=aList[j].start;
                        }
                        if(aList[j].end>end) {
                            end=aList[j].end;
                        }
                        if(!epl.ok) { //有全天的考勤记录，中间记录不必判断
                            //无全天记录，记录之间必须前后衔接，或者跳过中间休息时段
                            if(!((foreAd.end>=mid0 && aList[j].start<=mid1)
                                || foreAd.end>=aList[j].start)) {
                                continuous = false; //不连续
                                break;
                            }
                        }
                        foreAd=aList[j];
                        j++;
                        i++;
                    }
                    i = j;
                    if(epl.ok //一天多条记录的情况，再次检查是否能覆盖全天
                      || (continuous && start>=start0 && start<start1 && end>=end0 && end<end1)) {
                        epl.ok=true;
                        continue; //正常
                    }
                    if(excNum>0)sqls.push(',');
                    sqls.push('(', fore.uid, ',@{day},', start, ',', end, ')');
                    excNum++;
                }
                
                for(var uid in eMap) {
                    if(!eMap[uid].ok) {//检查漏刷卡
                        if(excNum>0)sqls.push(',');
                        sqls.push('(', uid, ',@{day},0,0)');
                        excNum++;
                    }
                }
                
                Logger.info('{} users' attendance checked, exception {}', num, excNum);
                if(excNum>0) {
                    DB.sql(sqls.join(''));
                } else {
                    DB.sqlError(0, 'not exists');
                }
            "]
        }
    ],
    
    "tailProcess" : [
        {
            "name" : "callback",
            "type" : "call",
            "service" : "schedule",
            "method" : "GET",
            "url" : "/callback?taskId=@{taskId}&tag=@{tag}&code=@{#code}&info=@{URL|encode,#info}",
            "tokenSign" : "APP",
            "trans" : false,
            "comment" : "检查完成后，执行此回调，通知schedule执行情况"
        } 
    ],

    "response":[]
}
]