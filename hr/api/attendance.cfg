[
{
    "name" : "clock",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "上班或下班打卡记录",
    
    "vars": [
        {"name":"cur", "val":"@{NOW|unit60000}"}
    ],
    
    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name" : "base_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select E.worktime,E.dSalary
                            Z.timeOff,W.first,W.forth,W.leadTime
                         from employee E,office O,zone Z,worktime W
                         where E.uid=@{#tokenCaller}
                          and O.id=E.office and Z.id=O.zone
                          and W.id=E.worktime"
                }
            ]
        },
        {
            "name" : "checkin_or_out",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                {
                    "name":"recent_rec",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "isWrite" : false,
                    "ignores" : [2001],
                    "sql" : "js:
                        //计算当天的最早刷卡开始时间
                        var start0=@{NOW|unit86400000}*1440-@{!timeOff}+@{!first}-@{!leadTime};
                        var start, end;
                        if(@{cur}>=start0) start=start0; //处在当前刷卡周期
                        else start=start0-1440;//处在上一个刷卡周期
                        end=start+1440;
                        start--;//避免大于等于判断
                        DB.sql(`select start from attendance
                             where uid=@{#tokenCaller} and start>`
                             + start + ' and start<' + end + ` and type='WORK'`);
                    "
                },
                
                "js:
                if('@[!start]'!='') { //下班卡
                    var dayStart=@{NOW|unit86400000}*1440-@{!timeOff};
                    var start1=dayStart+@{!first}; //上班刷卡结束时间
                    var start0=start1-@{!leadTime};//上班刷卡开始时间
                    var end0=dayStart+@{!forth};//下班刷卡开始时间
                    var end1=start0+1440;//下班刷卡结束时间
                    var mid0=dayStart+@{!second};//中间下班时间
                    var mid1=dayStart+@{!third};//中间上班时间
                    var start=@[!start];
                    var interval;
                    var total=@{!forth}-@{!first}-(@{!third}-@{!second});

                    if(start<mid0) { //上半段下班前刷卡
                        if(@{cur}<=mid1) {//上半段早退
                            interval=Math.min(@{cur},mid0)-Math.max(start,start1);
                        } else { //下半段下班或早退
                            interval=mid0-Math.max(start,start1)
                                + Math.min(@{cur},end0)-mid1;
                        }
                    } else { //下半段上班
                        interval=Math.min(@{cur},end0)-Math.max(start,mid1);
                    }
                    var val=(interval/total).toFixed(2);
                    DB.sql('update attendance set end=@{cur},val='+val+
                        +` where uid=@{#tokenCaller} and type='WORK'
                         and start=`+start);
                } else { //上班卡
                    DB.sql(`insert into attendance(uid,type,start)
                      values(@{#tokenCaller},'WORK',@{cur})`);
                }"
            ]
        }
    ]
},
{
    "name" : "getApply",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "查看申请详情",

    "request": [
        {"name":"id", "type":"int", "must":true, "comment":"申请id"}
    ],

    "process" : [
        {
            "name" : "get_apply_info",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                {
                    "name" : "apply_info",
                    "multi" : false,
                    "merge" : true,
                    "metas" : "each",
                    "sql" : "select A.uid,A.account,A.gid,
                           A.type,A.state,G.path,G.fid
                          from applies A,grp G
                         where A.id=@{id} and G.id=A.gid
                           and A.admin=@{#tokenCaller}" //必须是部门经理
                },
                {
                    "name" : "times",
                    "multi" : true,
                    "merge" : false,
                    "metas" : "each",
                    "sql" : "select start,end,cmt from applytime where aid=@{id}"
                }
            ]
        }
    ]
},
{
    "name" : "leave",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "请假申请。
        WEAL福利假，比如三八节、体检是福利假，不扣工资，这些假不是统一的，按小时请；
        HOLI年休假，必须按天请，不扣工资；
        AFFA事假，按分钟请，扣全额工资；
        SICK病假，扣部分工资，每个员工根据工作年限，扣工资额度不同；
        BUSI差旅，解决工作日在途不能刷卡问题，不涉及工资，如果节假日在途，填加班申请；",

    "request": [
        {"name":"id", "type":"int", "must":false, "comment":"申请id，不为空时，表示已生成applies记录"},
        {"name":"type", "type":"string", "must":true, "comment":"类型",
         "options":["HOLI","WEAL","AFFA","SICK","BUSI"]},
        {"name":"times", "type":"object", "must":true, "list":true, "props":[
            {"name":"start", "type":"int", "must":true, "comment":"请假开始时间，UTC分钟"},
            {"name":"end", "type":"int", "must":true, "comment":"请假结束时间，UTC分钟"},
            {"name":"cmt", "type":"string", "must":true, "comment":"描述"}
        ], "comment":"请假时间段，可以多个"}
    ],

    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name":"employee_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select e.weal,e.holiday,z.timeOff,
                            e.sickRatio,e.dSalary,e.hSalary,
                            w.first,w.second,w.third,w.forth,w.calendar
                         from employee e,office o,zone z,worktime w
                         where e.uid=@{#tokenCaller} and o.id=e.office
                          and z.id=o.zone and w.id=e.worktime"
                },
                {
                    "name" : "days",
                    "metas" : "oneCol",
                    "merge" : false,
                    "multi" : true,
                    "ignores" : [2001],
                    "sql" : "js:var times=@{times};
                        var minStart=2147483647, maxEnd=-2147483647;
                        var interval = 0;
                        for(var t of times) {
                            if(minStart>t.start) minStart=t.start;
                            if(maxEnd<t.end) maxEnd=t.end;
                            interval = t.end-t.start;
                            if(interval<=0||(interval%60)!=0) {
                                interval=-1; //请假最小单位为小时
                                break;
                            }
                        }
                        if(interval<=0) {
                            DB.sqlError(6106, 'invalid start or end');
                        } else {
                            var date=new Date();
                            var offset=date.getTimezoneOffset()+@[!timeOff];
                            date.setTime((minStart+offset)*60000);
                            var start=date.getFullYear()*100000+(date.getMonth()+1)*100+date.getDate()-1;
                            date.setTime((maxEnd+offset)*60000);
                            var end=date.getFullYear()*100000+(date.getMonth()+1)*100+date.getDate()+1;
                            DB.sql('select day from caldays where calendar=@[!calendar] and day>'
                                 + start + ' and day<' + end + ` and type='W'`)
                       }
                    "
                }
            ]
        },
        {
            "name" : "get_apply_id",
            "type" : "var",
            "when" : "'@{id}'==''",
            "vars":{
                "id":"@{SEQUENCE|'applyid'}"
            }
        },
        {
            "name" : "save_apply",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "expected":{"num":1,"code":111,"info":"no right"},
                    "sql":"replace into applies(id,uid,account,gid,type)
                     select @{id},@{#tokenCaller},'@{#tokenAcc}',m.gid,'@{type}'
                      from member m, grp g
                     where m.uid=@{#tokenCaller} and g.id=m.gid and g.type='D'
                      LIMIT 1" //正常情况一个帐号只会属于一个部门
                },
                
                "js:
                function duration(req, days) {
                    if(req.end-req.start>1440||req.end-req.start<60) {
                        return -1; //连续时间段必须在24小时之内
                    }
                    
                    var dt=new Date();
                    dt.setTime((req.start+dt.getTimezoneOffset()+@{!timeOff})*60000);
                    var cd=dt.getFullYear()*1000000+(dt.getMonth()+1)*100+dt.getDate();
                    if(!days[cd]) return -1; //非工作日，不必请假
                    var dayStart=Math.round(1440*(req.start/1440))-@{!timeOff};
                    var first=dayStart+@{!first};
                    var mid0=dayStart+@{!second};
                    var mid1=dayStart+@{!third};
                    var forth=dayStart+@{!forth};
                    
                    if(req.start<mid0) { //上半段开始
                        if(req.end<=mid1) { //上半段结束
                            return Math.min(req.end,mid0)-Math.max(first,req.start);
                        }
                        return mid0-Math.max(first,req.start) //下半段结束
                              + Math.min(forth,req.end)-mid1;
                    }
                    return Math.min(end,end0)-Math.max(mid1,req.start); //下半段开始
                }
                
                (function(){
                const WHOLEDAY=@{!forth}-@{!first}-(@{!third}-@{!second})
                var times=@{times};
                var type='@{type}';
                var t;
                var val;
                var total=0, dur;
                var sqls=[
                    'delete from applytime where aid=@{id};', //更新的情况，数据已存在
                    'insert into applytime(aid,uid,start,end,duration,val,cmt) values'
                ];
                
                var dd=@{IFNULL|!days,`[]`,obj};
                var days={};
                for(var d of dd) {
                    days[d]=true;
                }

                for(var i in times) {
                    t=times[i];
                    dur=duration(t,days);
                    if(dur<=0) {
                        return DB.sqlError(6003,'invalid start,end of No.' + i);
                    }
                    val=0; //扣薪
                    if(type=='HOLI') {//年休假，必须按天请
                        if(dur<WHOLEDAY) {
                            return DB.sqlError(6004,`holiday can't be split`);
                        }
                        total++;
                        if(total>@{!holiday}) {//年休假余额不足
                            return DB.sqlError(6006,'holiday not enough');
                        }
                        dur=1;
                    } else if(type=='WEAL') {//福利假，按小时请
                        if((dur%60)!=0) {
                            return DB.sqlError(6005,`weal can't be split`);
                        }
                        dur=Math.round(dur/60);
                        total+=dur;
                        if(total>@{!weal}) {
                            return DB.sqlError(6006,'weal not enough');
                        }
                    } else if(type=='SICK') { //病假，部分扣减
                        var sr=(1-@{!sickRatio}
                        val=-(@{!hSalary}*sr*dur/60).toFixed(2);
                    } else if(type=='AFFA') {//事假，全部扣减
                        val=-(@{!hSalary}*dur/60).toFixed(2);
                    } else { //BUSI，在途，不扣减
                    }
                    if(i>0)sqls.push(',');
                    sqls.push('(@{id},@{#tokenCaller},', t.start, ',', t.end,
                              ',', dur, ',', val, `,'`, t.cmt, `')`);
                }
                return DB.sql(sqls.join(''));
                })()" 
            ]
        }
    ],
    "response":[]
},

{
    "name" : "overtimework",
    "method" : "POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "加班、延长工时申请。
        WOW工作日延长工作时间，必须是工作时段之外；
        OOW休息日加班，比如周六、周日加班；
        FOW节假日加班，比如国庆、春节加班",
    
    "request": [
        {"name":"id", "type":"int", "must":false, "comment":"申请id"},
        {"name":"type", "type":"string", "must":true, "options":["WOW","OOW","FOW"], "comment":"类型"},
        {"name":"times", "type":"object", "must":true, "list":true, "props":[
            {"name":"start", "type":"int", "must":true, "comment":"加班开始时间，UTC分钟"},
            {"name":"end", "type":"int", "must":true, "comment":"加班结束时间，UTC分钟"},
            {"name":"cmt", "type":"string", "must":true, "comment":"描述"}
        ], "comment":"请假时间段，可以多个"}
    ],

    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "sqls" : [
                {
                    "name":"employee_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select z.timeOff,z.fowSalary,z.oowSalary,z.wowSalary,
                            e.worktime,e.hSalary,w.first,w.second,w.third,w.forth,w.calendar
                         from employee e,office o,zone z,worktime w
                         where e.uid=@{#tokenCaller} and o.id=e.office
                          and z.id=o.zone and w.id=e.worktime"
                },
                {
                    "name" : "days",
                    "metas" : "kv",
                    "merge" : false,
                    "multi" : true,
                    "ignores" : [2001],
                    "sql" : "js:var times=@{times};
                        var minStart=2147483647, maxEnd=-2147483647;
                        for(var t of times) {
                            if(minStart>t.start) minStart=t.start;
                            if(maxEnd<t.end) maxEnd=t.end;
                        }
                        var date=new Date();
                        var offset=date.getTimezoneOffset()+@[!timeOff];
                        date.setTime((minStart+offset)*60000);
                        var start=date.getFullYear()*100000+(date.getMonth()+1)*100+date.getDate()-1;
                        date.setTime((maxEnd+offset)*60000);
                        var end=date.getFullYear()*100000+(date.getMonth()+1)*100+date.getDate()+1;

                        DB.sql('select day,type from caldays where calendar=@[!calendar] and day>'
                                + start + ' and day<' + end);
                    "
                }
            ]
        },
        {
            "name":"get_apply_id",
            "type" : "var",
            "when" : "'${id}'==''",
            "vars":{
                "id":"@{SEQUENCE|'applyid'}"
            }
        },
        {
            "name" : "save_apply",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "expected":{"num":1,"code":111,"info":"no right"},
                    "sql":"replace into applies(id,uid,account,gid,type)
                     select @{id},@{#tokenCaller},'@{#tokenAcc}',M.gid,'@{type}'
                      from member M,grp G
                     where M.uid=@{#tokenCaller} and G.id=M.gid and G.type='D'
                      LIMIT 1" //正常情况一个帐号只会属于一个部门
                },
                "js:
                function duration(dType,req, days) {
                    //连续时间段必须在24小时之内，多天的，提交多条
                    if(req.end-req.start>1440||req.end-req.start<60) return -1;
                    
                    var dt=new Date();
                    dt.setTime((req.start+dt.getTimezoneOffset()+@{!timeOff})*60000)
                    var cd=dt.getFullYear()*1000000+dt.getMonth()*100+dt.getDate();
                    if(days[cd]!=dType) return -1;//判断类型是否正确
                    var dayStart=Math.round(1440*(req.start/1440))-@{!timeOff};
                    var first=dayStart+@{!first};
                    var mid0=dayStart+@{!second};
                    var mid1=dayStart+@{!third};
                    var forth=dayStart+@{!forth};
                    if(dType!='W') {//休息日或节假日加班，按平时作息判断加班时长
                         if(req.start<mid0) { //上半段开始
                            if(req.end<=mid1) { //上半段结束
                                return Math.min(req.end,mid0)-Math.max(first,req.start);
                            }
                            return mid0-Math.max(first,req.start) //下半段结束
                                  + Math.min(forth,req.end)-mid1;
                        }
                        return Math.min(end,end0)-Math.max(mid1,req.start); //下半段开始
                    }
                    //工作日延长工时，只算下班到第二天上班之前
                    if(req.start<forth || req.end>first+1440) {
                        return -1;//上班时段，不得加班
                    }
                    return req.end-req.start;
                }
                
                (function(){
                var days=@{IFNULL|!days,`{}`,obj};
                var times=@{times};
                var type='@{type}';
                var t;
                var val;
                var dur;
                var dType;
                var ratio;
                var sqls=[
                    'delete from applytime where aid=@{id};',
                    'insert into applytime(aid,uid,start,end,duration,val,cmt) values'
                ];
                
                if(type=='OOW') {
                    dType='O';
                    ratio=@{!oowSalary};
                } else if(type=='FOW') {
                    dType='F';
                    ratio=@{!fowSalary};
                } else {
                    dType='W';
                    ratio=@{!wowSalary};
                }
                
                for(var i in times) {
                    t=times[i];
                    dur=duration(dType,t,days);
                    if(dur<0) {
                        return DB.sqlError(6003,'invalid start or end');
                    }
                	val=(ratio*@{!hSalary}*dur/60).toFixed(2);
                    if(i>0)sqls.push(',');
                    sqls.push('(@{id},@{#tokenCaller},', t.start, ',', t.end,
                              ',', dur, ',', val, `,'`, t.cmt, `')`);
                }
                return DB.sql(sqls.join(''));
                })()" 
            ]
        }
    ],
    "response":[]
},

{
    "name": "confirm",
    "method":"POST",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment":"确认加班或请假申请，将申请时间转为考勤记录。一旦确认，不可更改",

    "request": [
        {"name":"id", "type":"int", "must":true, "min":0, "comment":"申请id"}
    ],

    "process" : [
        {
            "name" : "get_apply_info",
            "type" : "hr",
            "db" : "log",
            "convert":{"code":2001,"to":6002,"info":"no rights"},
            "comment" : "与act_confirm分开的好处是，js中占位符都被替换，在请求端即可执行，
                    不用将脚本发至webdb中解释执行，这里确认了是否为所在部门的管理员",
            "sqls" : [
                {
                    "name" : "base_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "sql" : "select A.uid,A.type from applies A,grp G
                         where A.id=@{id} and A.state='WAIT' and G.id=A.gid
                          and G.admin=@{#tokenCaller} and G.type='D'"
                },
                {
                    "name" : "times",
                    "metas" : "each",
                    "merge" : false,
                    "multi" : true,
                    "sql" : "select start,end,val from applytime where aid=@{id}"
                }
            ]
        },
        {
            "name" : "confirm",
            "type" : "rdb",
            "db": "log",
            "comment":"确认，生成考勤记录",

            "sqls" : [
                {
                    "expected":{"code":6008,"info":"no more holiday"}
                    "sql":"js:var times=@{!times};
                        var deduction=0;
                        var type='@{!type}';
                        var sqls=['insert into attendance(uid,type,start,end,val) values'];
                        for(var i in times) {
                            t=times[i];
                            if(i>0)sqls.push(',');
                            sqls.push(`(@{!uid},'@{!type}',`,t.start,',',t.end,',',t.val,`,'`,t.cmt,`')`);
                            if(type=='HOLI') {//一天一条，年休假按天扣除
                                deduction+=t.val; //申请时，val已为1
                            } else if(type=='WEAL'){ //福利假按小时扣除
                                deduction+=t.val;
                            }
                        }
                        if(deduction>0) {
                            sqls.push(';');
                            if(type=='HOLI') {
                                sqls.push('update employee set holiday=holiday-', deduction,
                                 ' where uid=@{!uid} and holiday>=', deduction, ';')
                            } else if(type=='WEAL'){
                                sqls.push('update employee set weal=weal-',deduction,
                                 ' where uid=@{!uid} and weal>=', deduction, ';');
                            }
                        }
                        sql.push(`update applies set state='OK',
                            opinion=opinion||'confirmed by @{#tokenAcc}'
                             where id=@{id}`);
                        DB.sql(sqls.join(''));
                    "
                }
            ]
        }
    ],
    "response":[]
},

{
    "name" : "reject",
    "method" : "PUT",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "拒绝申请",
    
    "request": [
        {"name":"id", "type":"int", "must":true, "comment":"申请id"}
    ],
    
    "process" : [
        {
            "name" : "get_base_info",
            "type" : "rdb",
            "db" : "hr",
            "convert":{"code":2001,"to":6002,"info":"no rights"},
            "sqls" : [
                {
                    "name":"grp_info",
                    "metas" : "each",
                    "merge" : true,
                    "multi" : false,
                    "comment":"权限确认，只有部门管理员可以审批",
                    "sql" : "select e.account
                          from applies a,grp g,employee e
                         where a.id=@{id} and g.uid=a.uid and g.type='D'
                           and g.admin=@{#tokenCaller} and e.uid=g.admin
                           and a.state<>'OK'"
                }
            ]
        },
        {
            "name" : "reject",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                "update applies set
                   state='REJ',
                   opinion=opinion||'rejected by @{#tokenAcc}'
                  where id=@{id}"
            ]
        }
    ]
},

{
    "name" : "cancel",
    "method" : "DELETE",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "取消申请，只能自己取消",
    
    "request": [
        {"name":"id", "type":"int", "must":true, "comment":"申请id"}
    ],
    
    "process" : [
        {
            "name" : "cancel",
            "type" : "rdb",
            "db" : "log",
            "sqls" : [
                {
                    "expected":{"num":1,"code":6002,"info":"no right"},
                    "sql":"delete from applies
                         where id=@{id} and uid=@{#tokenCaller}
                          and state<>'OK'"
                },
                "delete from applytime where aid=@{id}"
            ]
        }
    ]
},

{
    "name" : "my",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "我的加班&请假申请",
    
    "request": [
        {"name":"type", "type":"string", "must":false,
         "options":["WOW","FOW","OOW","BUSI","AFFA","SICK","WEAL","HOLI"],
         "comment":"类型"}
    ],
    
    "process" : [
        {
            "name" : "get_applies",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "name":"list",
                    "multi":true,
                    "merge":false,
                    "metas" : "each",
                    "sql":"select aid,uid,account,gid,type,state,opinion
                      from applies where uid=@{#tokenCaller}
                      @{IFVALID|type, ` and type='`, type, `'`}
                      order by aid desc"
                }
            ]
        }
    ]
},
{
    "name" : "waits",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "待我审批的申请",
    
    "process" : [
        {
            "name" : "get_applies",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "name" : "list",
                    "multi" : true,
                    "merge" : false,
                    "metas" : "each",
                    "sql" : "select A.id,A.uid,A.account,A.gid,
                        A.type,A.state,G.path,G.fid
                      from grp G,applies A
                     where G.admin=@{#tokenCaller} and G.type='D'
                       and A.gid=G.id and A.state='WAIT'
                      order by A.aid desc"
                }
            ]
        }
    ]
},
{
    "name" : "list",
    "method" : "GET",
    "property" : "private",
    "tokenChecker" : "USER",
    "comment" : "我审批的某帐号的申请",
    
    "request": [
        {"name":"uid", "type":"int", "must":true, "comment":"帐号id"},
        {"name":"type", "type":"string", "must":false,
         "options":["WOW","FOW","OOW","BUSI","AFFA","SICK","WEAL","HOLI"],
         "comment":"类型"}
    ],

    "process" : [
        {
            "name" : "get_applies",
            "type" : "rdb",
            "db":"log",
            "sqls" : [
                {
                    "name" : "list",
                    "multi" : true,
                    "merge" : false,
                    "metas" : "each",
                    "sql" : "select A.aid,A.uid,A.account,A.gid,
                        A.type,A.state,G.path,G.fid
                      from grp G,applies A
                     where G.admin=@{#tokenCaller} and G.type='D'
                       and A.gid=G.id and A.uid=@{uid}
                      @{IFVALID|type, ` and A.state='`, type, `'`}
                      order by A.aid desc"
                }
            ]
        }
    ]
}
]