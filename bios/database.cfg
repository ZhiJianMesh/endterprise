[
{
"name":"mesh_status",
"type":"rdb",
"version":"0.2.0",
"versions":[{
    "minVer":"0.0.0",
    "maxVer":"0.1.0",
    "sqls":[
        //服务节点状态，后台服务，无需按cid分片，因为记录的是服务间的token；
        //虽然类似CRM业务实例也会在此登记，且crm记录的是用户token，
        //但是它们的实例是通过httpdns分配给端侧，
        //而httpdns的逻辑是按cid分片的，不会导致同一个用户的token出现在多个实例中
        "create table if not exists srvstatus (
            partId    int not null, -- 分区id，在节点的partition.cfg中配置
            ver       int not null, -- 版本号major(3).minor(3).patch(3)
            srvstatus char(1) not null, -- 状态Y/N
            service   varchar(255) not null, -- 服务名称，启动后上报
            addr      varchar(255) not null, -- 节点(ip:port)
            
            primary key(partId, service, addr)
        )",
        "create index if not exists idx_srvstatus_upd on srvstatus(update_time)",

        "create table if not exists dbstatus ( -- 数据库节点状态，运行了webdb服务的节点
            partId    int not null, -- 分区id，在节点中配置
            cidStart  int not null,  -- 开始公司编号
            cidEnd    int not null,  -- 结束公司编号
            level     smallint not null default 0, -- 优先使用level值小的节点，级别相同，则随机转发
            dbstatus  char(1) not null, -- 状态 Y/N
            ver       int not null, -- 版本号Semantic(major.minor.patch，各3位十进制数

            -- 数据库节点可支持的服务，格式为'服务-数据库'或'服务'，
            -- 配置*表示接受所有服务的所有数据库，*匹配优先级最低
            service   varchar(255) not null,
            addr      varchar(255) not null, -- 主节点(ip:port)

            sharding  varchar(255) not null default '', -- 分片起止编号 start-end
            slaves    varchar(1024) not null, -- 从节点(ip:port，可多个，逗号分隔，在webdb节点中配置)
            
            primary key(partId,service,cidStart,addr)
        )",
        "create index if not exists idx_dbstatus_upd on dbstatus(update_time)"
    ]
}]
}
]